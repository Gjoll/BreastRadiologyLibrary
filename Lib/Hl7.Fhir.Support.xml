<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hl7.Fhir.Support</name>
    </assembly>
    <members>
        <member name="F:Hl7.Fhir.Language.TypeSpecifier.PrimitiveTypes">
            <summary>
            This is the list of supported types for the primitive values in ITypedElement.Value
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Language.TypeSpecifier.ForNativeType(System.Type)">
            <summary>
            Maps a C# type to a known TypeSpecifier.
            </summary>
            <param name="dotNetType">Value to determine the type for.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Language.TypeSpecifier.TryGetNativeType(System.Type@)">
            <summary>
            Returns the .NET type used to represent this TypeSpecifier.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Model.Primitives.Any.ConvertToSystemValue(System.Object)">
            <summary>
            Converts a primitive .NET instance to a System-based instance.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Primitives.Any.TryConvertToSystemValue(System.Object,System.Object@)">
            <summary>
            Try to converts a .NET instance to a System-based instance.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Model.Primitives.EqualityExtensions">
            <summary>
            Equality functions for the base set of primitives, based on section 6.1 of the FhirPath spec
            </summary>
            <remarks>Because PartialDate and PartialTime also accept timezones, the definition below
            deviates from the spec, and instead aligns with the logic for PartialDateTime as described
            in the FhirPath specification.
            </remarks>
        </member>
        <member name="T:Hl7.Fhir.Model.Primitives.EquivalenceExtensions">
            <summary>
            Equality functions for the base set of primitives, based on section 6.1 of the FhirPath spec
            </summary>
            <remarks>Because PartialDate and PartialTime also accept timezones, the definition below
            deviates from the spec, and instead aligns with the logic for PartialDateTime as described
            in the FhirPath specification.
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.Model.Primitives.PartialDate.Precision">
            <summary>
            The precision of the date available. 
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Primitives.PartialDate.Offset">
            <summary>
            The span of time ahead/behind UTC
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Primitives.PartialDate.HasOffset">
            <summary>
            Whether the time specifies an offset to UTC
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Primitives.PartialDate.ToDateTimeOffset(System.Int32,System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Converts the partial date to a full DateTimeOffset instance.
            </summary>
            <param name="hours"></param>
            <param name="minutes"></param>
            <param name="seconds"></param>
            <param name="defaultOffset">Offset used when the partial datetime does not specify one.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Model.Primitives.PartialDate.ToDateTimeOffset(System.Int32,System.Int32,System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Converts the partial date to a full DateTimeOffset instance.
            </summary>
            <param name="hours"></param>
            <param name="minutes"></param>
            <param name="seconds"></param>
            <param name="milliseconds"></param>
            <param name="defaultOffset">Offset used when the partial datetime does not specify one.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Model.Primitives.PartialDate.tryParse(System.String,Hl7.Fhir.Model.Primitives.PartialDate@)">
            <summary>
            Converts the partial date to a full DateTimeOffset instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Hl7.Fhir.Model.Primitives.PartialDateTime.Offset">
            <summary>
            The span of time ahead/behind UTC
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Primitives.PartialDateTime.Precision">
            <summary>
            The precision of the date and time available. 
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Primitives.PartialDateTime.HasOffset">
            <summary>
            Whether the time specifies an offset to UTC
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Primitives.PartialDateTime.ToDateTimeOffset(System.TimeSpan)">
            <summary>
            Converts the partial datetime to a full DateTimeOffset instance.
            </summary>
            <param name="defaultOffset">Offset used when the partial datetime does not specify one.</param>
            <returns></returns>
        </member>
        <member name="F:Hl7.Fhir.Model.Primitives.PartialPrecision.Fraction">
            <summary>
            Milliseconds and fractions
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Primitives.PartialTime.Offset">
            <summary>
            The span of time ahead/behind UTC
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Primitives.PartialTime.Precision">
            <summary>
            The precision of the time available. 
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Model.Primitives.PartialTime.HasOffset">
            <summary>
            Whether the time specifies an offset to UTC
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Model.Primitives.PartialTime.ToDateTimeOffset(System.Int32,System.Int32,System.Int32,System.TimeSpan)">
            <summary>
            Converts the partial time to a full DateTimeOffset instance.
            </summary>
            <param name="year">Year used to turn a time into a date</param>
            <param name="month">Month used to turn a time into a date</param>
            <param name="day">Day used to turn a time into a date</param>
            <param name="defaultOffset">Offset used when the partial time does not specify one.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Model.Primitives.PartialTime.FromDateTimeOffset(System.DateTimeOffset,Hl7.Fhir.Model.Primitives.PartialPrecision,System.Boolean)">
            <summary>
            
            </summary>
            <param name="dto"></param>
            <param name="prec"></param>
            <param name="includeOffset">Whether to include the timezone offset.</param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Model.Primitives.PartialTime.Now(System.Boolean)">
            <summary>
            
            </summary>
            <param name="includeOffset">Whether to include the timezone offset.</param>
            <returns></returns>
        </member>
        <member name="P:Hl7.Fhir.Utility.EnumLiteralAttribute.System">
            <summary>
            The system name-space of the code system that this literal value comes from 
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.ExceptionSourceExtensions.Catch(Hl7.Fhir.Utility.IExceptionSource,Hl7.Fhir.Utility.ExceptionNotificationHandler,System.Boolean)">
            <summary>
            Registers an <see cref="T:Hl7.Fhir.Utility.ExceptionNotificationHandler" /> with an <see cref="T:Hl7.Fhir.Utility.IExceptionSource"/>.
            </summary>
            <param name="source"></param>
            <param name="handler"></param>
            <param name="forward">If true, also forwards the error to the original handler (if any).</param>
            <returns>An object that, when disposed, unregisters the handler from the source.</returns>
            <remarks>
            <para>This function can be used directly inside a <c>using</c> block, to scope the interception
            of exceptions by the given handler to that block.</para>
            <para>The <paramref name="handler"/> replaces the handler already in place in the source (of any), but
            as soon as executing leaves the block, the handler is unregistered, and the original handler restored.</para>
            <para>If the source originally had a handler set, the <paramref name="forward"/> can be used to forward
            the exception to the original handler, after invoking the handler passed in with <paramref name="handler"/>.</para>
            </remarks>
            <example>
            <code>
            using(source.Catch((o,a) => lastError = a)) 
            {
                 var children = source.Children();
            }
            </code></example>
        </member>
        <member name="T:Hl7.Fhir.Utility.Error">
            <summary>
            Utility class for creating and unwrapping <see cref="T:System.Exception"/> instances.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.Argument(System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with the provided properties.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.Argument(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with the provided properties.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.ArgumentNull(System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentNullException"/> with the provided properties.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.ArgumentNull(System.String,System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentNullException"/> with the provided properties.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.ArgumentNullOrEmpty(System.String)">
            <summary>
            Creates an <see cref="T:System.ArgumentException"/> with a default message.
            </summary>
            <param name="parameterName">The name of the parameter that caused the current exception.</param>
            <returns>The logged <see cref="T:System.Exception"/>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.InvalidOperation(System.String)">
            <summary>
            Creates an <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.InvalidOperation(System.Exception,System.String)">
            <summary>
            Creates an <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.NotSupported(System.String)">
            <summary>
            Creates an <see cref="T:System.NotSupportedException"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.NotImplemented(System.String)">
            <summary>
            Creates an <see cref="T:System.NotImplementedException"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.NotImplemented">
            <summary>
            Creates an <see cref="T:System.NotImplementedException"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.Format(System.String,System.String,System.Exception)">
            <summary> 
            Creates an <see cref="T:System.FormatException"/> with the provided properties. 
            </summary> 
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.Format(System.String,Hl7.Fhir.Utility.IPositionInfo,System.Exception)">
            <summary> 
            Creates an <see cref="T:System.FormatException"/> with the provided properties. 
            </summary> 
        </member>
        <member name="M:Hl7.Fhir.Utility.Error.Format(System.String,System.Int32,System.Int32,System.Exception)">
            <summary> 
            Creates an <see cref="T:System.FormatException"/> with the provided properties. 
            </summary> 
        </member>
        <member name="M:Hl7.Fhir.Utility.ReflectionHelper.GetAttributeOnEnum``1(System.Enum)">
            <summary>
            Gets an attribute on an enum field value
            </summary>
            <typeparam name="T">The type of the attribute you want to retrieve</typeparam>
            <param name="enumVal">The enum value</param>
            <returns>The attribute of type T that exists on the enum value</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.ReflectionHelper.GetCollectionItemType(System.Type)">
            <summary>
            Gets the type of the typed collection's items.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the typed collection's items.</returns>
        </member>
        <member name="M:Hl7.Fhir.Utility.StringExtensions.MatchesPrefix(System.String,System.String)">
            <summary>
            See if text matches prefix, where the prefix can be either a
            string, or string ending in '*'. In the latter case a prefix match
            is done, otherwise the full strings are compared.
            </summary>
            <param name="text"></param>
            <param name="prefix"></param>
            <returns></returns>
        </member>
        <member name="T:Hl7.Fhir.Specification.IStructureDefinitionSummary">
            <summary>
            A class representing a complex type, with child elements. 
            </summary>
            <remarks>
             In FHIR, this interface represents definitions of Resources, datatypes and BackboneElements. 
             BackboneElements will have the TypeName set to "BackboneElement" (in resources) or "Element" (in datatypes)
             and IsAbstract set to true.
             </remarks>
        </member>
        <member name="T:Hl7.Fhir.Specification.XmlRepresentation">
            <summary>
            Xml Serialization used for primitive values
            </summary>
        </member>
    </members>
</doc>

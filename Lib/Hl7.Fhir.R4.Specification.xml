<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hl7.Fhir.R4.Specification</name>
    </assembly>
    <members>
        <member name="F:Hl7.Fhir.Specification.Schema.Binding.BindingStrength.Required">
            <summary>
            To be conformant, instances of this element SHALL include a code from the specified value set.<br/>
            (system: http://hl7.org/fhir/binding-strength)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Schema.Binding.BindingStrength.Extensible">
            <summary>
            To be conformant, instances of this element SHALL include a code from the specified value set if any of the codes within the value set can apply to the concept being communicated.  If the valueset does not cover the concept (based on human review), alternate codings (or, data type allowing, text) may be included instead.<br/>
            (system: http://hl7.org/fhir/binding-strength)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Schema.Binding.BindingStrength.Preferred">
            <summary>
            Instances are encouraged to draw from the specified codes for interoperability purposes but are not required to do so to be considered conformant.<br/>
            (system: http://hl7.org/fhir/binding-strength)
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Schema.Binding.BindingStrength.Example">
            <summary>
            Instances are not expected or even encouraged to draw from the specified value set.  The value set merely provides examples of the types of concepts intended to be included.<br/>
            (system: http://hl7.org/fhir/binding-strength)
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Schema.Binding.Validate(Hl7.Fhir.ElementModel.ITypedElement,Hl7.Fhir.Specification.Schema.ValidationContext)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="vc"></param>
            <returns></returns>
            <remarks>ValidationContext must have TerminologyService set.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Schema.Binding.VerifyContentRequirements(Hl7.Fhir.ElementModel.ITypedElement,Hl7.Fhir.Model.Element)">
            <summary>
            Validates whether the instance has the minimum required coded content, depending on the binding.
            </summary>
            <remarks>Will throw an <c>InvalidOperationException</c> when the input is not of a bindeable type.</remarks>
        </member>
        <member name="T:Hl7.Fhir.Specification.Schema.IValidatable">
            <summary>
            Implemented by assertions that work on a single ITypedElement.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Schema.ValidationDetail">
            <summary>
            All semantics about what is wrong goes here
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Navigation.Bookmark">
            <summary>Represents a bookmarked position of an <see cref="T:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator"/> instance.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Navigation.Bookmark.Empty">
            <summary>Singleton. Represents an unpositioned navigator.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Navigation.Bookmark.IsEmpty">
            <summary>Indicates if the bookmark is empty, i.e. represents an unpositioned navigator.</summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Navigation.DiscriminatorInterpreter">
            <summary>
            This visitor interprets a parsed FhirPath AST as a discriminator expression
            (see http://hl7.org/fhir/profiling.html#discriminator).
            </summary>
            <remarks>Given a <see cref="T:Hl7.Fhir.Specification.StructureDefinitionWalker"/>, this interpreter will
            walk the definition tree based on the discriminator tree visited.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.DiscriminatorInterpreter.VisitFunctionCall(Hl7.FhirPath.Expressions.FunctionCallExpression,Hl7.FhirPath.Expressions.SymbolTable)">
            <summary>
            Visit a function call appearing in a discriminator expression
            </summary>
            <remarks>May only be 'builtin.children', 'resolve' and 'extension'</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.DiscriminatorInterpeterExtensions.Walk(Hl7.Fhir.Specification.StructureDefinitionWalker,System.String)">
            <summary>
            Walk the definition given a discriminator path.
            </summary>
            <param name="me"></param>
            <param name="discriminatorExpression"></param>
            <returns></returns>
            <remarks>Discriminator paths are subsets of FhirPath as described here: http://www.hl7.org/implement/standards/fhir/profiling.html#discriminator</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.IsSibling(System.String,System.String)">
            <summary>Determines if the specified element paths represent sibling elements.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.IsDirectChildPath(System.String,System.String)">
            <summary>Determines if the specified child path represent a direct child of the specified parent path.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.IsChildPath(System.String,System.String)">
            <summary>Determines if the specified child path represent a (direct/grand) child of the specified parent path.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.GetParentPath(System.String)">
            <summary>Returns the parent path of the specified element path, or an empty string.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.IsRootPath(System.String)">
            <summary>Determines if the specified element path represents a root element.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.IsExtensionPath(System.String)">
            <summary>Determines if the specified element path represents a (modifier) extension element.</summary>
            <returns><c>true</c> if <paramref name="path"/> ends with <c>.extension</c> or <c>.modifierExtension</c>, or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.GetPathRoot(System.String)">
            <summary>Returns the root component of the specified element path.</summary>
            <param name="path">An element path.</param>
            <returns>A root path.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.ReplacePathRoot(System.String,System.String)">
            <summary>Replace the root component of the specified element path.</summary>
            <param name="path">An element path.</param>
            <param name="newRoot">The new path root.</param>
            <returns>An element path.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.NumberOfParts(System.String)">
            <summary>Returns the hierarchical depth of the specified element path, i.e. the number of path segments.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.GetLastPathComponent(System.String)">
            <summary>Returns the last path component of the specified element path, or the empty string.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.IsChoiceTypeElement(System.String)">
            <summary>Determines if the specified element path represents a choice type element.</summary>
            <returns><c>true</c> if <paramref name="path"/> ends with <c>[x]</c>, or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.IsRenamedChoiceTypeElement(System.String,System.String)">
            <summary>Determines if an element name matches a choice element name in the base profile.</summary>
            <param name="choiceName">A choice type element name that ends with <c>[x]</c>.</param>
            <param name="otherName">An element name.</param>
            <example><code>IsRenamedChoiceTypeElement("value[x]", "valueCodeableConcept")</code></example>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.ParseTypeFromRenamedElement(System.String,System.String)">
            <summary>Parse the type name from a renamed choice type element.</summary>
            <param name="rename">The new name of a renamed choice type element. Example: <c>valueQuantity</c>.</param>
            <param name="choiceName">The original choice type element name. Must end with "[x]". Example: <c>value[x]</c>.</param>
            <returns>A type name, or <c>null</c>.</returns>
            <example><code>ParseTypeFromRenamedElement("valueQuantity", "value[x]")</code></example>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.IsCandidateBasePath(System.String,System.String)">
            <summary>Determines if the specified element path matches a base element path.</summary>
            <param name="basePath">A base element path.</param>
            <param name="path">An derived element path.</param>
            <example><code>
            IsCandidateBasePath("DomainResource.meta", "Patient.meta")
            IsCandidateBasePath("Extension.value[x]", "Extension.valueBoolean")
            IsCandidateBasePath("Element.id", "Extension.url.id")
            </code></example>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.IsResliceName(System.String)">
            <summary>Determines if the specified element name represents a reslice: "slice/reslice[/reslice2...]".</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.GetBaseSliceName(System.String)">
            <summary>Extracts the name of the base slice from a reslicing constraint name.</summary>
            <returns>The name of the base slice, or <c>null</c>.</returns>
            <example><code>
            GetBaseSliceName("A/B") == "A"
            GetBaseSliceName("A/B/C") == "A/B"
            GetBaseSliceName("A") == null
            </code></example>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.IsDirectResliceOf(System.String,System.String)">
            <summary>Determines if the specified slice name represents a reslice of an existing slice.</summary>
            <param name="sliceName">The name of the candidate slice.</param>
            <param name="baseSliceName">The name of an existing slice.</param>
            <returns><c>true</c> if <paramref name="sliceName"/> is a reslice of <paramref name="baseSliceName"/>, or <c>false</c> otherwise.</returns>
            <example><code>
            IsDirectResliceOf("A/B", "A") == true
            
            IsDirectResliceOf("A", "A") == false
            IsDirectResliceOf("B/A", "A") == false
            IsDirectResliceOf("A/B/C", "A") == false
            </code></example>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.IsResliceOf(System.String,System.String)">
            <summary>Determines if the specified slice name represents a (nested) reslice of an existing slice.</summary>
            <param name="sliceName">The name of the candidate slice.</param>
            <param name="baseSliceName">The name of an existing slice.</param>
            <returns><c>true</c> if <paramref name="sliceName"/> is a (nested) reslice of <paramref name="baseSliceName"/>, or <c>false</c> otherwise.</returns>
            <example><code>
            IsResliceOf("A/B", "A") == true
            IsResliceOf("A/B/C", "A") == true
            
            IsResliceOf("A", "A") == false
            IsResliceOf("B/A", "A") == false
            </code></example>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.IsSiblingSliceOf(System.String,System.String)">
            <summary>Determines if the specified slice names represent sibling slices.</summary>
            <returns><c>true</c> if <paramref name="sliceName"/> represents a sibling slice of <paramref name="siblingSliceName"/>, or <c>false</c> otherwise.</returns>
            <example><code>
            IsSiblingSliceOf("A", "B") == true
            IsSiblingSliceOf("A", null) == true
            IsSiblingSliceOf("A/1", "A/2") == true
            
            IsSiblingSliceOf("A", "A") == false
            IsSiblingSliceOf("A/1", "A") == false
            </code></example>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.#ctor(System.Collections.Generic.IList{Hl7.Fhir.Model.ElementDefinition})">
            <summary>Create a new <see cref="T:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator"/> instance to navigate the specified element list.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.ForSnapshot(Hl7.Fhir.Model.StructureDefinition)">
            <summary>
            Create a new <see cref="T:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator"/> instance to navigate the elements
            in the <see cref="P:Hl7.Fhir.Model.StructureDefinition.Snapshot"/> component of the specified structure definition.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.ForDifferential(Hl7.Fhir.Model.StructureDefinition)">
            <summary>
            Create a new <see cref="T:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator"/> instance to navigate the elements
            in the <see cref="P:Hl7.Fhir.Model.StructureDefinition.Differential"/> component of the specified structure definition.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.StructureDefinition">
            <summary>Returns a reference to the <see cref="P:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.StructureDefinition"/> instance containing the navigated elements.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.AtRoot">
            <summary>Indicates if the navigator has not yet been positioned on a node.</summary>
            <returns><c>true</c> if <see cref="P:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.Current"/> equals <c>null</c>, or <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.PathName">
            <summary>Get the name of the current node, based on the last part of the part.</summary>
            <returns>The node name, or <see cref="F:System.String.Empty"/> if the navigator is not located on a node</returns>
        </member>
        <member name="P:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.ParentPath">
            <summary>Get the parent path of the current node.</summary>
            <returns>The parent path, or <see cref="F:System.String.Empty"/> if the navigator is not located on a node.</returns>
        </member>
        <member name="P:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.Path">
            <summary>Get the full path of the current node.</summary>
            <returns>The path or String.Empty if the navigator is not located on a node</returns>
        </member>
        <member name="P:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.Current">
            <summary>Returns a reference to the current node, or <c>null</c>.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.Count">
            <summary>Returns the total number of nodes.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.InsertBefore(Hl7.Fhir.Model.ElementDefinition)">
            <summary>
            Inserts the element passed in as a sibling to the element the navigator is currently on. 
            The navigator will move to the inserted element.
            </summary>
            <param name="sibling"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.InsertAfter(Hl7.Fhir.Model.ElementDefinition)">
            <summary>
            Inserts the element passed in as a sibling to the element the navigator is currently on. 
            The navigator will move to the inserted element.
            </summary>
            <param name="sibling"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.InsertFirstChild(Hl7.Fhir.Model.ElementDefinition)">
            <summary>
            Inserts the element passed in as a child of the element the navigator is currently on. 
            The navigator will move to the inserted element.
            </summary>
            <param name="child"></param>
            <returns></returns>
            <remarks>You can only insert a child for an element does not have children yet.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator.ToListOfElements">
            <summary>
            Returns the list of elements passed to the constructor, including any changes made to the list using
            the modification functions of the navigator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.NavModificationExtensions.CopyChildren(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator,Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator)">
            <summary>
            Insert the children of the source navigator under the node pointed to by this Navigator.
            </summary>
            <param name="dest"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.NamedNavigationExtensions.MoveToChild(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator,System.String)">
            <summary>Move the navigator to the first child element with the specified name, if it exists.</summary>
            <returns><c>true</c> if succesful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.NamedNavigationExtensions.MoveToNext(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator,System.String)">
            <summary>Move the navigator to the first following sibling element with the specified name, if it exists.</summary>
            <returns><c>true</c> if succesful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.NamedNavigationExtensions.MoveToPrevious(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator,System.String)">
            <summary>Move the navigator to the first preceding sibling element with the specified name, if it exists.</summary>
            <returns><c>true</c> if succesful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.NamedNavigationExtensions.MoveTo(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator,System.String)">
            <summary>Move the navigator to the first preceding or following sibling element with the specified name, if it exists.</summary>
            <returns><c>true</c> if succesful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.NamedNavigationExtensions.MoveTo(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator,Hl7.Fhir.Model.ElementDefinition)">
            <summary>Move the navigator to the specified element.</summary>
            <returns><c>true</c> if succesful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.NamedNavigationExtensions.JumpToFirst(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator,System.String)">
            <summary>Move the navigator to the first element with the specified path.</summary>
            <returns><c>true</c> if succesful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.NamedNavigationExtensions.Find(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator,System.String)">
            <summary>Find all existing elements with the specified path.</summary>
            <returns>A sequence of <see cref="T:Hl7.Fhir.Specification.Navigation.Bookmark"/> values.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementNavigatorSlicingExtensions.IsRenamedChoiceTypeElement(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator,System.String)">
            <summary>Determines if the element with the specified name represents a type slice for the current (choice) element.</summary>
            <returns><c>true</c> if the element name represents a type slice of the current element, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementNavigatorSlicingExtensions.MoveToNextSliceAtAnyLevel(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator)">
            <summary>
            Advance the navigator to the immediately following slicing constraint in the current slice group, at any (re)slicing level.
            Skip any existing child elements.
            Otherwise remain positioned at the current element.
            </summary>
            <returns><c>true</c> if succesful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementNavigatorSlicingExtensions.MoveToNextSliceAtAnyLevel(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator,System.String)">
            <summary>
            Advance the navigator forward to the slicing constraint in the current slice group with the specified slice name.
            Otherwise remain positioned at the current element.
            </summary>
            <returns><c>true</c> if succesful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementNavigatorSlicingExtensions.MoveToNextSlice(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator)">
            <summary>
            Advance the navigator to the next slice in the current slice group and on the current slicing level.
            Skip any existing child elements and/or child reslicing constraints.
            Otherwise remain positioned at the current element.
            </summary>
            <returns><c>true</c> if succesful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementNavigatorSlicingExtensions.MoveToNextSlice(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator,System.String)">
            <summary>
            Advance the navigator to the next sibling slice with the specified <paramref name="sliceName"/>, if it exists.
            Skip any existing child elements and/or child reslicing constraints.
            Otherwise remain positioned at the current element.
            </summary>
            <returns><c>true</c> if succesful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementNavigatorSlicingExtensions.MoveToPreviousSlice(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator)">
            <summary>
            Advance the navigator to the previous slice in the current slice group and on the current slicing level.
            Skip any existing child elements and/or child reslicing constraints.
            Otherwise remain positioned at the current element.
            </summary>
            <returns><c>true</c> if succesful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementNavigatorSlicingExtensions.MoveToFirstReslice(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator)">
            <summary>
            Advance the navigator to the first reslice of the current named slice.
            Skip any existing child elements and/or child reslicing constraints.
            Otherwise remain positioned at the current element.
            </summary>
            <returns><c>true</c> if succesful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementNavigatorSlicingExtensions.IsSliceBase(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator,System.String)">
            <summary>
            Returns <c>true</c> if the specified <paramref name="sliceName"/> matches
            the sliceName of the current element, or represents a direct child reslice.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementNavigatorSlicingExtensions.MoveToSliceBase(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator,System.String)">
            <summary>
            Try to position the navigator on a (sibling) slice that is a base for the specified (derived) sliceName.
            Also handles re-slices. Maintain current position if match.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementNavigatorSlicingExtensions.FindMemberSlices(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator,System.Boolean)">
            <summary>
            Enumerate any succeeding direct child slices of the specified element.
            Skip any intermediate child elements and re-slice elements.
            When finished, return the navigator to the initial position.
            </summary>
            <param name="intro"></param>
            <param name="atRoot">Specify <c>true</c> for finding direct (simple) slices, or <c>false</c> for finding re-slices.</param>
            <returns>A sequence of <see cref="T:Hl7.Fhir.Specification.Navigation.Bookmark"/> instances.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ElementNavigatorSlicingExtensions.CloneSubtree(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator)">
            <summary>Recursively clone the current element and all it's children and return a new navigator for the resulting subtree.</summary>
            <returns>A new <see cref="T:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator"/> instance that wraps the cloned element list.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ProfileNavigationExtensions.Rebase(Hl7.Fhir.Model.IElementList,System.String)">
            <summary>
            Rewrites the Path's of the elements in a structure so they are based on the given path: the root
            of the given structure will become the given path, it's children will be relocated below that path
            </summary>
            <param name="root">The structure that will be rebased on the path</param>
            <param name="path">The path to rebase the structure on</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ProfileNavigationExtensions.Rebase(System.Collections.Generic.IList{Hl7.Fhir.Model.ElementDefinition},System.String)">
            <summary>
            Rewrites the Path's of the elements in a structure so they are based on the given path: the root
            of the given structure will become the given path, it's children will be relocated below that path
            </summary>
            <param name="elements">A list of element definitions that will be rebased on the path.</param>
            <param name="path">The path to rebase the structure on.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ProfileNavigationExtensions.PrimaryType(Hl7.Fhir.Model.ElementDefinition)">
            <summary>Returns the primary element type, if it exists.</summary>
            <param name="defn">An <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> instance.</param>
            <returns>A <see cref="T:Hl7.Fhir.Model.ElementDefinition.TypeRefComponent"/> instance, or <c>null</c>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ProfileNavigationExtensions.PrimaryTypeProfile(Hl7.Fhir.Model.ElementDefinition)">
            <summary>Returns the type profile reference of the primary element type, if it exists, or <c>null</c></summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ProfileNavigationExtensions.PrimaryTypeProfiles(Hl7.Fhir.Model.ElementDefinition)">
            <summary>Returns the type profile reference(s) of the primary element type code, if available.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ProfileNavigationExtensions.SafeSingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the only element of a sequence,
            or the default value if the sequence is empty or contains multiple elements.
            <para>
            If the specified sequence contains multiple elements, then this method returns the default value.
            The standard LINQ method <see cref="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})"/>
            would throw an exception.
            </para>
            </summary>
            <typeparam name="T">The type of the elements of <paramref name="sequence"/></typeparam>
            <param name="sequence">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> to return the single element of.</param>
            <returns>A value of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ProfileNavigationExtensions.GetTypeProfile(Hl7.Fhir.Model.ElementDefinition.TypeRefComponent)">
            <summary>
            If the specified type reference specifies a single profile url, then return it.
            Otherwise return the core profile url for the specified type code.
            </summary>
            <param name="elemType">A <see cref="T:Hl7.Fhir.Model.ElementDefinition.TypeRefComponent"/> instance.</param>
            <returns>An profile uri string, or <c>null</c>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ProfileNavigationExtensions.PrimaryTypeCode(Hl7.Fhir.Model.ElementDefinition)">
            <summary>Returns the type code of the primary element type, or <c>null</c>.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ProfileNavigationExtensions.CommonTypeCode(System.Collections.Generic.List{Hl7.Fhir.Model.ElementDefinition.TypeRefComponent})">
            <summary>
            If the element is constrained to a single common type (i.e. if all the existing
            <see cref="T:Hl7.Fhir.Model.ElementDefinition.TypeRefComponent"/> items share a common type code),
            then return that common type code, otherwise return <c>null</c>.
            </summary>
            <param name="types">A list of element types.</param>
            <returns>A type code.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ProfileNavigationExtensions.CommonTypeCode(Hl7.Fhir.Model.ElementDefinition)">
            <summary>
            If the element is constrained to a single common type (i.e. if all the existing
            <see cref="T:Hl7.Fhir.Model.ElementDefinition.TypeRefComponent"/> items share a common type code),
            then return that common type code, otherwise return <c>null</c>.
            </summary>
            <param name="elem">An element definition.</param>
            <returns>A type code.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ProfileNavigationExtensions.DistinctTypeCodes(System.Collections.Generic.List{Hl7.Fhir.Model.ElementDefinition.TypeRefComponent})">
            <summary>Returns a list of distinct type codes supported by the specified element definition.</summary>
            <param name="types">A list of element types.</param>
            <returns>A list of type code strings.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ProfileNavigationExtensions.DistinctTypeCodes(Hl7.Fhir.Model.ElementDefinition)">
            <summary>Returns a list of distinct type codes supported by the specified element definition.</summary>
            <param name="elem">An <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> instance.</param>
            <returns>A list of type code strings.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ProfileNavigationExtensions.IsMappedExtension(Hl7.Fhir.Model.ElementDefinition)">
            <summary>Returns <c>true</c> if the element represents an extension with a custom extension profile url, or <c>false</c> otherwise.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ProfileNavigationExtensions.IsReference(Hl7.Fhir.Model.ElementDefinition)">
            <summary>Determines if the specified element definition represents a <see cref="T:Hl7.Fhir.Model.ResourceReference"/>.</summary>
            <param name="defn">An <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> instance.</param>
            <returns><c>true</c> if the instance defines a reference, or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ProfileNavigationExtensions.IsBackboneElement(Hl7.Fhir.Model.ElementDefinition)">
             <summary>
             Determines if the specified element is a backbone element
             </summary>
             <param name="defn"></param>
             <returns></returns>
             <remarks>Backbone elements are nested groups of elements, that appear within resources (of type BackboneElement) or as
             within datatypes (of type Element).
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ProfileNavigationExtensions.IsReference(Hl7.Fhir.Model.ElementDefinition.TypeRefComponent)">
            <summary>Determines if the specified type reference represents a <see cref="T:Hl7.Fhir.Model.ResourceReference"/>.</summary>
            <param name="typeRef">A <see cref="T:Hl7.Fhir.Model.ElementDefinition.TypeRefComponent"/> instance.</param>
            <returns><c>true</c> if the instance defines a reference, or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ProfileNavigationExtensions.IsChoice(Hl7.Fhir.Model.ElementDefinition)">
            <summary>Determines if the specified element definition represents a type choice element by verifying that the element name ends with "[x]".</summary>
            <param name="defn">An <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> instance.</param>
            <returns><c>true</c> if the instance defines a type choice element, or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ProfileNavigationExtensions.GetRootElement(Hl7.Fhir.Model.IElementList)">
            <summary>Returns the root element from the specified element list, if available, or <c>null</c>.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ProfileNavigationExtensions.GetRootElement(System.Collections.Generic.List{Hl7.Fhir.Model.ElementDefinition})">
            <summary>Returns the root element from the specified element list, if available, or <c>null</c>.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ProfileNavigationExtensions.CanonicalPath(Hl7.Fhir.Model.ElementDefinition,Hl7.Fhir.Model.StructureDefinition)">
            <summary>
            Builds a fully qualified path for the ElementDefinition.
            </summary>
            <param name="def"></param>
            <param name="parent"></param>
            <returns></returns>
            <remarks>A fully qualified path is the path of the ElementDefinition, prefixed by the canonical of 
            the StructureDefinition the ElementDefinition is part of.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ProfileNavigationExtensions.CanonicalPath(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator)">
            <summary>
            Builds a fully qualified path for the ElementDefinition.
            </summary>
            <remarks>A fully qualified path is the path of the ElementDefinition, prefixed by the canonical of 
            the StructureDefinition the ElementDefinition is part of.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ProfileNavigationExtensions.MatchesName(Hl7.Fhir.Model.ElementDefinition,System.String)">
            <summary>
            Given an name, determines whether this ElementDefinition's path matches the name.
            </summary>
            <param name="def"></param>
            <param name="name"></param>
            <returns></returns>
            <remarks>This function will match any definition for which the path is a direct match, or matches the element name without suffix.</remarks>
        </member>
        <member name="T:Hl7.Fhir.Specification.Navigation.ProfileReference">
            <summary>Represents a reference to an element type profile.</summary>
            <remarks>Useful to parse complex profile references of the form "canonicalUrl#elementName".</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Navigation.ProfileReference.Parse(System.String)">
            <summary>Initialize a new <see cref="T:Hl7.Fhir.Specification.Navigation.ProfileReference"/> instance from the specified url.</summary>
            <param name="url">A resource reference to a profile.</param>
            <returns>A new <see cref="T:Hl7.Fhir.Specification.Navigation.ProfileReference"/> structure.</returns>
        </member>
        <member name="P:Hl7.Fhir.Specification.Navigation.ProfileReference.CanonicalUrl">
            <summary>Returns the canonical url of the profile.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Navigation.ProfileReference.ElementName">
            <summary>Returns an optional profile element name, if included in the reference.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Navigation.ProfileReference.IsComplex">
            <summary>Returns <c>true</c> if the profile reference includes an element name, <c>false</c> otherwise.</summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.StructureDefinitionWalker">
            <summary>
            This class implements basic functions to walk deeper into a StructureDefinition, 
            using a child name, disambiguating on type, navigating across references or directly
            to expected extensions. This functionality mirrors the potential navigation concepts
            on a discriminator, as documented in http://hl7.org/fhir/profiling.html#discriminator.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.StructureDefinitionWalker.Child(System.String)">
            <summary>
            Returns a new walker that represents the definition for the given child.
            </summary>
            <param name="childName"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">Thrown when there is no childName given.</exception>
        </member>
        <member name="M:Hl7.Fhir.Specification.StructureDefinitionWalker.Expand">
            <summary>
            Returns a set of walkers containing the children of the current node.
            </summary>
            <returns></returns>
            <remarks>There are three cases:
            1. If the walker contains an ElementDefinition with children, it returns itself. 
            2. If the ElementDefinition has a NameReference, it returns the node referred to by the namereference.
            3. If not 1 or 2, it returns a set of walkers representing the type(s) the ElementDefinition refers to.
            
            This order ensures that local ("inline") constraints for the children in the snapshot take
            precedence over following the type.profile link.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.StructureDefinitionWalker.OfType(System.String)">
            <summary>
            In an ElementDefinition that possibly is a choice, returns a set of walkers representing the
            constraints for only the <paramref name="type"/>.
            </summary>
            <param name="type"></param>
            <returns></returns>
            <remarks>This is basically an Expand(), filtering by the given type. Note that this function might return
            multiple walkers if there are multiple different constraints for the same type (typerefs with the same
            type code, but multiple different profiles.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.StructureDefinitionWalker.Resolve">
            <summary>
            Walks across a reference, if the current node is a reference.
            </summary>
            <returns></returns>
            <remarks>May return multiple walkers, one for each of the references encountered.</remarks>
            <exception cref="T:Hl7.Fhir.Specification.StructureDefinitionWalkerException">Thrown when the ElementDefinition's type is not a Reference.</exception>
        </member>
        <member name="M:Hl7.Fhir.Specification.StructureDefinitionWalker.Extension(System.String)">
            <summary>
            Finds the constraints for a specific extension within the (sliced) extension collection
            </summary>
            <param name="url"></param>
            <returns></returns>
            <remarks>Note that this is yet another place where we need to deal with slices along the discriminator
            path. In this case we assume (but is this always true????) that the extension element is sliced so it
            can either point to a defined extension or contains inline child constraints on (probably the value element of)
            the referenced extension.
            </remarks>
        </member>
        <member name="T:Hl7.Fhir.Specification.Snapshot.DifferentialTreeConstructor">
            <summary>
            Differential structures may contain paths that "skip" over parents. For our profile expansion logic,
            it's easier to have the skipped parents present. This class will insert these missing parents.
            Notice that these parent are just "stand ins", there's no
            slicing or ElementDefn information associated with them, so they should not have any 
            influence on the final snapshot form.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.DifferentialTreeConstructor.MakeTree(Hl7.Fhir.Model.StructureDefinition.DifferentialComponent)">
            <summary>Create a valid tree structure from a sparse differential element list by adding missing parent element definitions.</summary>
            <returns>A list of <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> instances that represent a tree structure.</returns>
            <remarks>This method returns a new list of element definitions. The input elements list is not modified.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.DifferentialTreeConstructor.MakeTree(System.Collections.Generic.List{Hl7.Fhir.Model.ElementDefinition})">
            <summary>Create a valid tree structure from a sparse differential element list by adding missing parent element definitions.</summary>
            <returns>A list of <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> instances that represent a tree structure.</returns>
            <remarks>This method returns a new list of element definitions. The input elements list is not modified.</remarks>
        </member>
        <member name="T:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator">
            <summary>
            Provides functionality to generate the snapshot component of a <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> resource.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.ElementDefnMerger">
            <summary>
            Private static helper for <see cref="T:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator"/>.
            Merge two <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> instances and all their properties.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.ElementDefnMerger.Merge(Hl7.Fhir.Specification.Snapshot.SnapshotGenerator,Hl7.Fhir.Model.ElementDefinition,Hl7.Fhir.Model.ElementDefinition,System.Boolean)">
            <summary>Merge two <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> instances. Existing diff properties override associated snap properties.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.ElementDefnMerger.onConstraint(Hl7.Fhir.Model.Element)">
            <summary>Notify clients about a snapshot element with differential constraints.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.ElementDefnMerger.onConstraint``1(System.Collections.Generic.List{``0})">
            <summary>Notify clients about a snapshot collection element with differential constraints.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.ElementDefnMerger.mergePrimitiveElement``1(``0,``0,System.Boolean)">
            <summary>
            Merges two FHIR primitives.
            By default, a differential value replaces/overrides the snapshot value.
            If the differential value is a string and starts with ellipsis ('...'),
            then append differential text to snapshot text.
            Merge differential extensions with snapshot extensions.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.GenerateSnapshotBaseComponents(Hl7.Fhir.Model.StructureDefinition,System.Boolean)">
            <summary>Initialize the <see cref="P:Hl7.Fhir.Model.ElementDefinition.Base"/> components of the <see cref="P:Hl7.Fhir.Model.StructureDefinition.Snapshot"/> component.</summary>
            <param name="structureDef">A <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> instance with a valid snapshot component.</param>
            <param name="force">If <c>true</c>, then always (re-)generate the Base component, even if it exists.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.ensureBaseComponents(System.Collections.Generic.IList{Hl7.Fhir.Model.ElementDefinition},System.String,System.Boolean)">
            <summary>(Re-)generate the <see cref="P:Hl7.Fhir.Model.ElementDefinition.Base"/> components.</summary>
            <param name="elements">A list of <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> instances.</param>
            <param name="baseProfileUrl">The canonical url of the base profile, as defined by the <see cref="P:Hl7.Fhir.Model.StructureDefinition.Base"/> property.</param>
            <param name="force">If <c>true</c>, then always (re-)generate the Base component, even if it exists.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.#ctor(Hl7.Fhir.Specification.Source.IResourceResolver,Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorSettings)">
            <summary>
            Create a new instance of the <see cref="T:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator"/> class
            for the specified resource resolver and configuration settings.
            </summary>
            <param name="resolver">A <see cref="T:Hl7.Fhir.Specification.Source.IResourceResolver"/> instance.</param>
            <param name="settings">Configuration settings that control the behavior of the snapshot generator.</param>
            <exception cref="T:System.ArgumentNullException">One of the specified arguments is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.#ctor(Hl7.Fhir.Specification.Source.IResourceResolver)">
            <summary>
            Create a new instance of the <see cref="T:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator"/> class
            for the specified resource resolver and with default configuration settings.
            </summary>
            <param name="resolver">A <see cref="T:Hl7.Fhir.Specification.Source.IResourceResolver"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">One of the specified arguments is <c>null</c>.</exception>
        </member>
        <member name="P:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.Source">
            <summary>Returns a reference to the associated <see cref="T:Hl7.Fhir.Specification.Source.IResourceResolver"/> instance, as specified in the call to the constructor.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.Settings">
            <summary>Returns the snapshot generator configuration settings.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.CurrentProfileUri">
            <summary>Returns a reference to the profile uri of the currently generating snapshot, or <c>null</c>.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.Update(Hl7.Fhir.Model.StructureDefinition)">
            <summary>
            (Re-)generate the <see cref="P:Hl7.Fhir.Model.StructureDefinition.Snapshot"/> component of the specified <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> instance.
            Resolve the associated base profile snapshot and merge the <see cref="P:Hl7.Fhir.Model.StructureDefinition.Differential"/> component.
            </summary>
            <param name="structure">A <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> instance.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.Generate(Hl7.Fhir.Model.StructureDefinition)">
            <summary>
            Generate the snapshot element list of the specified <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> instance.
            Resolve the associated base profile snapshot and merge the <see cref="P:Hl7.Fhir.Model.StructureDefinition.Differential"/> component.
            Returns the expanded element list.
            Does not modify the <see cref="P:Hl7.Fhir.Model.StructureDefinition.Snapshot"/> property of the specified instance.
            </summary>
            <param name="structure">A <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> instance.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.ExpandElement(Hl7.Fhir.Model.IElementList,Hl7.Fhir.Model.ElementDefinition)">
            <summary>Recursively expand (the children of) a single element definition.</summary>
            <param name="elements">A <see cref="T:Hl7.Fhir.Model.StructureDefinition.SnapshotComponent"/> or <see cref="T:Hl7.Fhir.Model.StructureDefinition.DifferentialComponent"/> instance.</param>
            <param name="element">The element to expand. Should be part of <paramref name="elements"/>.</param>
            <returns>A new, expanded list of <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> instances.</returns>
            <exception cref="T:System.ArgumentException">The specified element is not contained in the list.</exception>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.ExpandElement(System.Collections.Generic.IList{Hl7.Fhir.Model.ElementDefinition},Hl7.Fhir.Model.ElementDefinition)">
            <summary>Recursively expand (the children of) a single element definition.</summary>
            <param name="elements">A list of <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> instances, taken from snapshot or differential.</param>
            <param name="element">The element to expand. Should be part of <paramref name="elements"/>.</param>
            <returns>A new, expanded list of <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> instances.</returns>
            <exception cref="T:System.ArgumentException">The specified element is not contained in the list.</exception>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.ExpandElement(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator)">
            <summary>Recursively expand (the children of) a single element definition.</summary>
            <param name="nav">An <see cref="T:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator"/> instance positioned on the target element to be expanded.</param>
            <returns><c>true</c> if the element is succesfully expanded, or <c>false</c> otherwise.</returns>
            <exception cref="T:System.ArgumentException">The specified navigator is not positioned on an element.</exception>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.MergeElementDefinition(Hl7.Fhir.Model.ElementDefinition,Hl7.Fhir.Model.ElementDefinition,System.Boolean)">
            <summary>Merge two sets of element constraints, e.g. base and differential.</summary>
            <param name="snap">A set of element constraints.</param>
            <param name="diff">Another set of element constraints to merge on top of the base.</param>
            <param name="mergeElementId">Determines if the snapshot should inherit Element.id values from the differential.</param>
            <returns>A new <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> instance.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.generate(Hl7.Fhir.Model.StructureDefinition)">
            <summary>
            Expand the differential component of the specified structure and return the expanded element list.
            The given structure is not modified.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.expandElement(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator)">
            <summary>
            Expand the currently active element within the specified <see cref="T:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator"/> instance.
            If the element has a name reference, then merge from the targeted element.
            Otherwise, if the element has a custom type profile, then merge it.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.merge(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator,Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator)">
            <summary>Merge children of the currently selected element from differential into snapshot.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.mergeElementDefinition(Hl7.Fhir.Model.ElementDefinition,Hl7.Fhir.Model.ElementDefinition,System.Boolean)">
            <summary>Merge a differential ElementDefinition constraint into a snapshot ElementDefinition instance.</summary>
            <param name="snap"></param>
            <param name="diff"></param>
            <param name="mergeElementId">Determines if the snapshot should inherit Element.id values from the differential.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.copyChildren(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator,Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator)">
            <summary>
            Copy child elements from <paramref name="typeNav"/> to <paramref name="nav"/>.
            Remove existing annotations, fix Base components
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.prepareMergedTypeProfileElements(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator,Hl7.Fhir.Model.StructureDefinition)">
            <summary>
            Process child element definitions inherited from a merged external element type profile.
            For each element, raise the <see cref="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.OnPrepareElement(Hl7.Fhir.Model.ElementDefinition,Hl7.Fhir.Model.StructureDefinition,Hl7.Fhir.Model.ElementDefinition)"/> event
            and ensure that the element id is assigned.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.IsEqualPath(System.String,System.String)">
            <summary>Determine if the specified element paths are equal. Performs an ordinal comparison.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.IsEqualName(System.String,System.String)">
            <summary>Determine if the specified element names are equal. Performs an ordinal comparison.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.IsEqualUri(System.String,System.String)">
            <summary>Determine if the specified uri strings are equal. Performs an ordinal comparison.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.IsEqualType(System.String,System.String)">
            <summary>Determine if the specified type codes are equal. Performs an ordinal comparison.</summary>
        </member>
        <member name="E:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.Constraint">
            <summary>
            An event that notifies clients when a differential constraint has been processed.
            The specified <see cref="T:Hl7.Fhir.Model.Element"/> instance is the result of merging the base
            element with the associated differential constraint(s).
            The event handler can inspect and optionally modify the element.
            The result will be included in the snapshot.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.OnConstraint(Hl7.Fhir.Model.Element)">
            <summary>Raise the <see cref="E:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.Constraint"/> event to notify the client that a differential constraint has been processed.</summary>
            <param name="element">A reference to the snapshot element with merged differential constraints.</param>
        </member>
        <member name="E:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.PrepareBaseProfile">
            <summary>
            An event that notifies clients when a base profile has been resolved.
            </summary>
            <remarks>
            The <see cref="P:Hl7.Fhir.Specification.Snapshot.SnapshotBaseProfileEventArgs.BaseProfile"/> event argument returns a
            reference to the original base profile instance as returned by the artifact source.
            Modifications to this instance will affect the original cached artifact
            and will be visible to other consumers of the artifact source.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.OnPrepareBaseProfile(Hl7.Fhir.Model.StructureDefinition,Hl7.Fhir.Model.StructureDefinition)">
            <summary>
            Raise the <see cref="E:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.PrepareBaseProfile"/> event to notify the client
            when the associated base profile has been resolved and prepared for merging.
            </summary>
            <param name="profile">A profile <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> instance.</param>
            <param name="baseProfile">The associated base profile <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> instance.</param>
        </member>
        <member name="E:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.PrepareElement">
            <summary>
            An event that notifies clients when the generator initializes a new snapshot element.
            The specified element is cloned from the base profile and the base path has been fixed.
            The event handler can inspect and optionally modify the element.
            After the event handler returns, the snapshot generator merges the associated
            differential constraints, if they exist.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.OnPrepareElement(Hl7.Fhir.Model.ElementDefinition,Hl7.Fhir.Model.StructureDefinition,Hl7.Fhir.Model.ElementDefinition)">
            <summary>Raise the <see cref="E:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.PrepareElement"/> event to notify the client when an element definition is being prepared for merging.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.MustRaisePrepareElement">
            <summary>Indicates if the <see cref="E:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.PrepareElement"/> event has any active subscribers.</summary>
        </member>
        <member name="E:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.BeforeExpandElement">
            <summary>
            An event that notifies clients when the snapshot generator must determine wether to expand a specific profile element.
            The event handler can inspect and optionally modify the <see cref="P:Hl7.Fhir.Specification.Snapshot.SnapshotExpandElementEventArgs.MustExpand"/> flag.
            If the flag equals <c>true</c>, then the snapshot generator will expand the current element.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.OnBeforeExpandElement(Hl7.Fhir.Model.ElementDefinition,System.Boolean,System.Boolean@)">
            <summary>
            Raise the <see cref="E:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.BeforeExpandElement"/> event to notify the client when deciding wether to expand the current element.
            The client can modify the value of the <paramref name="mustExpand"/> parameter to control expansion of specific elements.
            Warning: recursively expanding all profile elements may cause infinite recursion!
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.Outcome">
            <summary>
            Returns <c>null</c> if the snapshot generation completed without issues.
            Otherwise returns a descriptive <see cref="T:Hl7.Fhir.Model.OperationOutcome"/> instance with a list of encountered issues.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Snapshot.ElementIdSegment">
            <summary>Represents a segment of an element Id, derived from the (original) element name and the (optional) slice name.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Snapshot.ElementIdSegment.Empty">
            <summary>Represents an empty segment.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementIdSegment.Create(System.String,System.String)">
            <summary>Create a new <see cref="T:Hl7.Fhir.Specification.Snapshot.ElementIdSegment"/> from the specified (original) element name and (optional) slice name.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementIdSegment.Create(Hl7.Fhir.Model.ElementDefinition)">
            <summary>Create a new <see cref="T:Hl7.Fhir.Specification.Snapshot.ElementIdSegment"/> from the specified element definition.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementIdSegment.Parse(System.String)">
            <summary>
            Create a new <see cref="T:Hl7.Fhir.Specification.Snapshot.ElementIdSegment"/> by parsing the specified id segment string of the form "elementName[:sliceName]".
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementIdSegment.ParseId(System.String)">
            <summary>Parse the specified element id into a sequence of <see cref="T:Hl7.Fhir.Specification.Snapshot.ElementIdSegment"/>s.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Snapshot.ElementIdSegment.ElementName">
            <summary>Returns the (original) element name.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Snapshot.ElementIdSegment.SliceName">
            <summary>Returns the (optional) slice name, or <c>null</c>.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Snapshot.ElementIdSegment.IsEmpty">
            <summary>Determines if this instance represents an empty segment, i.e. if the <see cref="F:Hl7.Fhir.Specification.Snapshot.ElementIdSegment.ElementName"/> equals <c>null</c>.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementIdSegment.ToString">
            <summary>Returns a formatted element id segment of the form "ElementName[:SliceName]".</summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Snapshot.ElementIdGenerator">
            <summary>For generating unique element IDs according to the standardized default format.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Snapshot.ElementIdGenerator.ElementIdSegmentDelimiter">
            <summary>Delimiter inbetween segments of an element id.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Snapshot.ElementIdGenerator.ElementIdSliceNameDelimiter">
            <summary>Delimiter inbetween path segment and (optional) element slice name.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementIdGenerator.GenerateIdSegment(Hl7.Fhir.Model.ElementDefinition)">
            <summary>
            Generate an element ID segment for the specified <see cref="T:Hl7.Fhir.Model.ElementDefinition"/>
            by concatenating the (original) element name and the slice name (if not empty).
            For choice type elements, the element ID segment is always generated from the original
            element name (ending with "[x]") as specified by <see cref="P:Hl7.Fhir.Model.ElementDefinition.BaseComponent.Path"/>,
            concatenated with the sliceName, which by convention should be initialized to the renamed element name.
            </summary>
            <returns>A string that represents an element id segment of the form "elementName[:sliceName]".</returns>
            <remarks>To generate the full element id, traverse the element hierarchy and concatenate the associated element id segments.</remarks>
            <example>value[x]:valueString</example>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementIdGenerator.GenerateIdSegment(System.String,System.String)">
            <summary>Generate a segment of a standardized element ID from the specified element path and slice name.</summary>
            <returns>A string that represents an standardized element id segment of the form "elementName[:sliceName]".</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementIdGenerator.ParseId(System.String)">
            <summary>Parse a standardized element id into an array of segments of the form "elementName[:sliceName]".</summary>
            <param name="elementId">An element id.</param>
            <returns>An array of element id segments of the form "elementName[:sliceName]".</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementIdGenerator.GenerateId(Hl7.Fhir.Model.ElementDefinition,System.String)">
            <summary>Generate a standard element ID for the specified <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> instance.</summary>
            <param name="elemDef">An <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> instance.</param>
            <param name="parentElementId">The (generated) element id of the associated parent element, or <c>null</c>.</param>
            <returns>A string that represents the full element ID.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementIdGenerator.GenerateId(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator)">
            <summary>
            Generate a standard element ID for the current element of the specified
            <see cref="T:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator"/> instance, by recursively traversing all the (grand)parent elements.
            </summary>
            <returns>A string that represents the full element ID.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementIdGenerator.Update(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator,System.Boolean,System.Boolean)">
            <summary>
            Generate and assign standard element IDs to the current element of the specified
            <see cref="T:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator"/> instance and it's children, recursively.
            </summary>
            <param name="nav">An <see cref="T:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator"/> instance.</param>
            <param name="force">Determines wether to regenerate (<c>true</c>) or maintain (<c>false</c>) any existing element IDs.</param>
            <param name="onlyChildren">Determines wether to only update child element ids (<c>true</c>) or also update the id of the current element (<c>false</c>).</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementIdGenerator.Update(Hl7.Fhir.Model.StructureDefinition,System.Boolean)">
            <summary>
            Generate and assign unique element IDs in standardized default format
            for all the <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> items in the snapshot
            component of the specified <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> instance.
            </summary>
            <param name="structure">A <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> instance.</param>
            <param name="force">Determines wether to regenerate (<c>true</c>) or maintain (<c>false</c>) any existing element IDs.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementIdGenerator.Update(System.Collections.Generic.IList{Hl7.Fhir.Model.ElementDefinition},System.Boolean)">
            <summary>
            Generate and assign unique element IDs in standardized default format
            for a list of <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> instances.
            </summary>
            <param name="elements">A list of <see cref="T:Hl7.Fhir.Model.ElementDefinition"/>s.</param>
            <param name="force">Determines wether to regenerate (<c>true</c>) or maintain (<c>false</c>) any existing element IDs.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementIdGenerator.Clear(Hl7.Fhir.Model.StructureDefinition)">
            <summary>Clear all the existing element IDs in the snapshot component.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementIdGenerator.Clear(System.Collections.Generic.IList{Hl7.Fhir.Model.ElementDefinition})">
            <summary>Clear all the existing element IDs.</summary>
            <param name="elements">A list of <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> instances.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementIdGenerator.Clear(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator,System.Boolean)">
            <summary>Clear the element IDs of the current element and it's children, recursively.</summary>
            <param name="nav">An <see cref="T:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator"/> instance that is positioned on a specific element.</param>
            <param name="onlyChildren">Determines wether to only clear child element ids (<c>true</c>) or also clear the id of the current element (<c>false</c>).</param>
        </member>
        <member name="T:Hl7.Fhir.Specification.Snapshot.ElementMatcher.MatchAction">
            <summary>Constants that indicate how a match should be processed.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Snapshot.ElementMatcher.MatchAction.Merge">
            <summary>Merge the elementdefinition in snap with the diff</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Snapshot.ElementMatcher.MatchAction.Add">
            <summary>Add the elementdefinition to slice (with diff merged to the slicing entry base definition)</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Snapshot.ElementMatcher.MatchAction.Slice">
            <summary>Begin a new slice with this slice as slicing entry</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Snapshot.ElementMatcher.MatchAction.New">
            <summary>Introduce a new element (for core resource and datatype definitions).</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Snapshot.ElementMatcher.MatchAction.Invalid">
            <summary>The element constraint is invalid and should be discarded.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Snapshot.ElementMatcher.MatchInfo.Action">
            <summary>Indicates how to handle this match: Merge | Add | Slice</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Snapshot.ElementMatcher.MatchInfo.BaseBookmark">
            <summary>Represents an element in the base profile.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Snapshot.ElementMatcher.MatchInfo.DiffBookmark">
            <summary>Represents a matching element in the differential.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Snapshot.ElementMatcher.MatchInfo.Issue">
            <summary>Returns optional matching error information.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementMatcher.Match(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator,Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator)">
            <summary>Match the children of the current element in diffNav to the children of the current element in snapNav.</summary>
            <param name="snapNav">A navigator for the user profile differential.</param>
            <param name="diffNav">A navigator for the base profile snapshot.</param>
            <returns>
            Returns a list of Bookmark combinations, the first bookmark pointing to an element in the base,
            the second a bookmark in the diff that matches the bookmark in the base.
            </returns>
            <remarks>
            Will match slices to base elements, re-sliced slices to slices and type-slice shorthands to choice elements.
            Note that this function may expand snapNav when it encounters paths in the differential that move into the complex types
            of one of snap's elements. (NO NEED, it just has to match direct children, not deeper)
            This function assumes the differential is not sparse: it must have parent nodes for all child constraint paths.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementMatcher.matchBase(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator,Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator,System.Collections.Generic.List{System.String})">
            <summary>Move snapNav to matching base element for diffNav, if it exists. Otherwise diffNav introduces a new element.</summary>
            <returns><c>true</c> if snapNav is positioned on matching base element, or <c>false</c> if diffNav introduces a new element.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementMatcher.constructMatch(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator,Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator)">
            <summary>
            Creates matches between the elements pointed to by snapNav and diffNav. After returning, both
            navs will be located on the last element that was matched (e.g. in a slicing group)
            </summary>
            <param name="snapNav"></param>
            <param name="diffNav"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementMatcher.HasSlicingComponent(Hl7.Fhir.Model.ElementDefinition)">
            <summary>Returns <c>true</c> if the specified element has a slicing component (<see cref="P:Hl7.Fhir.Model.ElementDefinition.Slicing"/> is not <c>null</c>).</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementMatcher.isExtensionSlice(Hl7.Fhir.Model.ElementDefinition)">
            <summary>Returns true if the element has type Extension and also specifies a custom type profile.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementMatcher.getExtensionProfileUri(Hl7.Fhir.Model.ElementDefinition)">
            <summary>Given an extension element, return the canonical url of the associated extension definition, or <c>null</c>.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementMatcher.IsExtensionType(Hl7.Fhir.Model.ElementDefinition)">
            <summary>Determines if the specified element has single type code "Extension".</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementMatcher.IsExtensionType(System.String)">
            <summary>Returns <c>true</c> if the specified <paramref name="typeName"/> equals <c>Extension</c>, or <c>false</c> otherwise.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementMatcher.isProfileDiscriminator(Hl7.Fhir.Model.ElementDefinition.DiscriminatorComponent)">
            <summary>Determines if the specified value equals the special predefined discriminator for slicing on element type profile.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementMatcher.isTypeDiscriminator(Hl7.Fhir.Model.ElementDefinition.DiscriminatorComponent)">
            <summary>Determines if the specified value equals the special predefined discriminator for slicing on element type.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementMatcher.isUrlDiscriminator(Hl7.Fhir.Model.ElementDefinition.DiscriminatorComponent)">
            <summary>Determines if the specified value equals the fixed default discriminator for slicing extension elements.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementMatcher.listChoiceElements(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator)">
            <summary>List names of all following choice type elements ('[x]').</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.ElementMatcher.findRenamedChoiceElement(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator,System.String)">
            <summary>Find name of child element that represent a rename of the specified choice type element name.</summary>
            <param name="nav">An <see cref="T:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator"/> instance.</param>
            <param name="choiceName">Original choice type element name ending with "[x]".</param>
        </member>
        <member name="T:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorBaseComponentExtensionMethods">
            <summary>Internal extension method for initializing the <see cref="P:Hl7.Fhir.Model.ElementDefinition.Base"/> component.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorBaseComponentExtensionMethods.EnsureBaseComponent(Hl7.Fhir.Model.ElementDefinition,Hl7.Fhir.Model.ElementDefinition,System.Boolean)">
            <summary>Ensure that the <see cref="P:Hl7.Fhir.Model.ElementDefinition.Base"/> component is properly initialized.</summary>
            <param name="elem">An <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> instance.</param>
            <param name="baseElem">The associated base <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> instance.</param>
            <param name="force">If <c>true</c>, then always (re-)generate the Base component, even if it exists.</param>
        </member>
        <member name="T:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorAnnotations">
            <summary>Provides support for custom annotation types used by the <see cref="T:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator"/>.</summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorAnnotations.CreatedBySnapshotGeneratorAnnotation">
            <summary>Annotation to mark a generated element, so we can prevent duplicate re-generation.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorAnnotations.SetCreatedBySnapshotGenerator(Hl7.Fhir.Model.Element)">
            <summary>Marks the specified element as generated by the <see cref="T:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator"/>.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorAnnotations.IsCreatedBySnapshotGenerator(Hl7.Fhir.Model.Element)">
            <summary>Determines if the specified element was created by the <see cref="T:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator"/>.</summary>
            <param name="elem">A FHIR <see cref="T:Hl7.Fhir.Model.Element"/>.</param>
            <returns><c>true</c> if the element was created by the <see cref="T:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator"/>, or <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorAnnotations.ConstrainedByDiffAnnotation">
            <summary>
            Custom annotation for elements and properties in the <see cref="T:Hl7.Fhir.Model.StructureDefinition.SnapshotComponent"/>
            that are constrained by the <see cref="T:Hl7.Fhir.Model.StructureDefinition.DifferentialComponent"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorAnnotations.SetConstrainedByDiffAnnotation(Hl7.Fhir.Model.Base)">
            <summary>Annotate the specified snapshot element to indicate that it is constrained by the differential.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorAnnotations.RemoveConstrainedByDiffAnnotation(Hl7.Fhir.Model.Base)">
            <summary>Remove any existing differential constraint annotation from the specified snapshot element.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorAnnotations.RemoveAllConstrainedByDiffAnnotations(Hl7.Fhir.Model.Base)">
            <summary>Recursively remove any existing differential constraint annotations from the specified snapshot element and all it's children.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorAnnotations.RemoveAllConstrainedByDiffAnnotations``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Recursively remove any existing differential constraint annotations from the specified snapshot elements and all their children.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorAnnotations.IsConstrainedByDiff(Hl7.Fhir.Model.Base)">
            <summary>
            Determines if the specified element is annotated as being constrained by the differential.
            Note that this method is non-recursive; only the specified element itself is inspected, child element annotations are ignored.
            Use <seealso cref="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorAnnotations.HasDiffConstraintAnnotations(Hl7.Fhir.Model.Base)"/> to perform a recursive check.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorAnnotations.HasDiffConstraintAnnotations(Hl7.Fhir.Model.Base)">
            <summary>Determines if the specified element or any of it's children is annotated as being constrained by the differential.</summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorAnnotations.SnapshotElementDefinitionAnnotation">
            <summary>For annotating a differential element definition with a reference to the associated generated snapshot element definition.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorAnnotations.SnapshotElementDefinitionAnnotation.SnapshotElement">
            <summary>
            Custom annotation type for <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> instances in the <see cref="P:Hl7.Fhir.Model.StructureDefinition.Differential"/> component.
            Returns a reference to the associated <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> instance in the <see cref="P:Hl7.Fhir.Model.StructureDefinition.Snapshot"/> component.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorAnnotations.SnapshotElementDefinitionAnnotation.DiffElement">
            <summary>
            DEBUGGING
            Returns a reference to the original parent <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> that owns the annotation.
            Should be equal to the actual owner.
            Otherwise, indicates that the element has been cloned (with annotations).
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorAnnotations.SetSnapshotRootElementAnnotation(Hl7.Fhir.Model.StructureDefinition,Hl7.Fhir.Model.ElementDefinition)">
            <summary>
            Annotate the root <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> instance in the <see cref="P:Hl7.Fhir.Model.StructureDefinition.Differential"/> component
            with a reference to the associated root <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> instance in the <see cref="P:Hl7.Fhir.Model.StructureDefinition.Snapshot"/> component.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorAnnotations.SetSnapshotElementAnnotation(Hl7.Fhir.Model.ElementDefinition,Hl7.Fhir.Model.ElementDefinition)">
            <summary>
            Annotate the specified <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> instance in the <see cref="P:Hl7.Fhir.Model.StructureDefinition.Differential"/> component
            with a reference to the associated <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> instance in the <see cref="P:Hl7.Fhir.Model.StructureDefinition.Snapshot"/> component.
            </summary>
            <param name="diffElemDef"></param>
            <param name="snapElemDef"></param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorAnnotations.GetSnapshotRootElementAnnotation(Hl7.Fhir.Model.StructureDefinition)">
            <summary>
            Return the annotated reference to the associated root <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> instance
            in the <see cref="P:Hl7.Fhir.Model.StructureDefinition.Snapshot"/> component, if it exists, or <c>null</c> otherwise.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorAnnotations.GetSnapshotElementAnnotation(Hl7.Fhir.Model.ElementDefinition)">
            <summary>
            Return the annotated reference to the associated <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> instance
            in the <see cref="P:Hl7.Fhir.Model.StructureDefinition.Snapshot"/> component, if it exists, or <c>null</c> otherwise.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorAnnotations.HasSnapshotElementAnnotation(Hl7.Fhir.Model.ElementDefinition)">
            <summary>
            DEBUGGING
            Indicates if the specified <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> is annotated
            with a reference to the associated snapshot element definition.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorAnnotations.RemoveSnapshotRootElementAnnotation(Hl7.Fhir.Model.StructureDefinition)">
            <summary>Remove all <see cref="T:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorAnnotations.SnapshotElementDefinitionAnnotation"/> instances from the root <see cref="T:Hl7.Fhir.Model.ElementDefinition"/>.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorAnnotations.RemoveSnapshotElementAnnotations(Hl7.Fhir.Model.ElementDefinition)">
            <summary>Remove all <see cref="T:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorAnnotations.SnapshotElementDefinitionAnnotation"/> instances from the specified <see cref="T:Hl7.Fhir.Model.ElementDefinition"/>.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorErrors.ThrowIfNullOrNotPositioned(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator,System.String)">
            <summary>
            Throw a runtime exception if the specified <see cref="T:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator"/> instance
            is <c>null</c> or if it is not positioned on an element.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorErrors.ThrowIfNullOrEmptyPath(Hl7.Fhir.Model.ElementDefinition,System.String)">
            <summary>
            Throw a runtime exception if the specified <see cref="T:Hl7.Fhir.Model.ElementDefinition"/> instance is <c>null</c>,
            or if the <see cref="P:Hl7.Fhir.Model.ElementDefinition.Path"/> property is <c>null</c> or empty.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorErrors.ThrowIfNullOrNoSnapshot(Hl7.Fhir.Model.StructureDefinition,System.String)">
            <summary>
            Throw a runtime exception if the specified <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> instance is <c>null</c>,
            or if the <see cref="P:Hl7.Fhir.Model.StructureDefinition.Snapshot"/> component is <c>null</c> or empty.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Snapshot.SnapshotConstraintEventArgs">
            <summary>Event arguments for the <see cref="T:Hl7.Fhir.Specification.Snapshot.SnapshotConstraintHandler"/> event delegate.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Snapshot.SnapshotConstraintEventArgs.Element">
            <summary>Returns a reference to a constrained snapshot element definition or property.</summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Snapshot.SnapshotConstraintHandler">
            <summary>A delegate type for hooking up <see cref="E:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.Constraint"/> events.</summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Snapshot.SnapshotBaseProfileEventArgs">
            <summary>Event arguments for the <see cref="T:Hl7.Fhir.Specification.Snapshot.SnapshotBaseProfileHandler"/> event delegate.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Snapshot.SnapshotBaseProfileEventArgs.Profile">
            <summary>Returns a reference to a profile.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Snapshot.SnapshotBaseProfileEventArgs.BaseProfile">
            <summary>Returns a reference to the associated base profile.</summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Snapshot.SnapshotBaseProfileHandler">
            <summary>A delegate type for hooking up <see cref="E:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.PrepareBaseProfile"/> events.</summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Snapshot.SnapshotElementEventArgs">
            <summary>Event arguments for the <see cref="T:Hl7.Fhir.Specification.Snapshot.SnapshotElementHandler"/> event delegate.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Snapshot.SnapshotElementEventArgs.Element">
            <summary>Returns a reference to an element definition.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Snapshot.SnapshotElementEventArgs.BaseElement">
            <summary>Returns a reference to the associated base element definition.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Snapshot.SnapshotElementEventArgs.BaseStructure">
            <summary>Returns a reference to the associated base structure definition. The snapshot component contains the <see cref="P:Hl7.Fhir.Specification.Snapshot.SnapshotElementEventArgs.BaseElement"/> instance.</summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Snapshot.SnapshotElementHandler">
            <summary>A delegate type for hooking up <see cref="E:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.PrepareElement"/> events.</summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Snapshot.SnapshotExpandElementEventArgs">
            <summary>Event arguments for the <see cref="T:Hl7.Fhir.Specification.Snapshot.SnapshotExpandElementHandler"/> event delegate.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Snapshot.SnapshotExpandElementEventArgs.Element">
            <summary>Returns a reference to the current element.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Snapshot.SnapshotExpandElementEventArgs.HasChildren">
            <summary>Indicates wether the current element has any child elements.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Snapshot.SnapshotExpandElementEventArgs.MustExpand">
            <summary>Gets or sets a boolean value that determines wether the snapshot generator should expand children of the current element.</summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Snapshot.SnapshotExpandElementHandler">
            <summary>A delegate type for hooking up <see cref="E:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator.BeforeExpandElement"/> events.</summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorExtensions">
            <summary>Helper methods for the <see cref="T:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator"/> class to generate and inspect custom extensions.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorExtensions.CONSTRAINED_BY_DIFF_EXT">
            <summary>The canonical url of the extension definition that marks snapshot elements with associated differential constraints.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorExtensions.SetConstrainedByDiffExtension(Hl7.Fhir.Model.IExtendable,System.Boolean)">
            <summary>
            Decorate the specified snapshot element definition with a special extension
            to indicate that the element is constrained by the differential.
            </summary>
            <param name="element">An <see cref="T:Hl7.Fhir.Model.IExtendable"/> instance.</param>
            <param name="value">An optional boolean value (default <c>true</c>).</param>
            <remarks>Sets the <see cref="F:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorExtensions.CONSTRAINED_BY_DIFF_EXT"/> extension to store the boolean flag.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorExtensions.GetConstrainedByDiffExtension(Hl7.Fhir.Model.IExtendable)">
            <summary>Determines if the snapshot element was decorated with an extension indicating the element is constrained by the differential.</summary>
            <param name="element">An <see cref="T:Hl7.Fhir.Model.IExtendable"/> instance.</param>
            <returns>A boolean value, or <c>null</c>.</returns>
            <remarks>Gets the boolean flag from the <see cref="F:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorExtensions.CONSTRAINED_BY_DIFF_EXT"/> extension, if it exists.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorExtensions.RemoveConstrainedByDiffExtension(Hl7.Fhir.Model.IExtendable)">
            <summary>Removes the <see cref="F:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorExtensions.CONSTRAINED_BY_DIFF_EXT"/> extension from the specified element definition.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorExtensions.RemoveAllConstrainedByDiffExtensions(Hl7.Fhir.Model.Element)">
            <summary>Recursively removes all instances of the <see cref="F:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorExtensions.CONSTRAINED_BY_DIFF_EXT"/> extension from the specified element definition and all it's child objects.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorExtensions.RemoveAllConstrainedByDiffExtensions``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Recursively removes all instances of the <see cref="F:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorExtensions.CONSTRAINED_BY_DIFF_EXT"/> extension from all the elements and their respective child objects.</summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorSettings">
            <summary>Configuration settings for the <see cref="T:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator"/> class.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorSettings.Default">
            <summary>Default configuration settings for the <see cref="T:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator"/> class.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorSettings.CreateDefault">
            <summary>Creates a new <see cref="T:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorSettings"/> instance with default property values.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorSettings.#ctor">
            <summary>Default ctor.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorSettings.#ctor(Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorSettings)">
            <summary>Clone ctor. Generates a new instance with the same state as the specified instance.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorSettings.Clone">
            <summary>Returns an exact clone of the current configuration settings instance.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorSettings.CopyTo(Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorSettings)">
            <summary>Copy all configuration settings to another instance.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorSettings.GenerateSnapshotForExternalProfiles">
            <summary>
            If enabled (default), the snapshot generator will automatically generate the snapshot component
            of any referenced external profiles on demand if necessary.
            If disabled, then skip the merging of any external type profiles without a snapshot component.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorSettings.ForceRegenerateSnapshots">
            <summary>
            Force expansion of all external profiles, disregarding any existing snapshot components.
            If enabled, the snapshot generator will re-generate the snapshot components of all the core resource and datatype profiles
            as well as of all other referenced external profiles.
            Re-generated snapshots are annotated to prevent duplicate re-generation (assuming the provided resource resolver uses caching).
            If disabled (default), then the snapshot generator relies on existing snapshot components, if they exist.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorSettings.GenerateExtensionsOnConstraints">
            <summary>
            Enable this setting to add a custom <see cref="F:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorExtensions.CONSTRAINED_BY_DIFF_EXT"/> extension
            to elements and properties in the snapshot that are constrained by the differential with respect to the base profile.
            <br />
            Note that this extension only applies to the containing profile and should NOT be inherited by derived profiles.
            The FHIR API snapshot generator explicitly removes and re-generates these extensions for each profile.
            The <seealso cref="T:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorExtensions"/> class provides utility methods to read and/or remove the generated extensions.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorSettings.GenerateAnnotationsOnConstraints">
            <summary>Enable this setting to annotate all elements and properties in the snapshot that are constrained by the differential.</summary>
            <remarks>The <seealso cref="T:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorAnnotations"/> class provides utility methods to read and/or remove the generated annotations.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorSettings.GenerateElementIds">
            <summary>Enable this setting to automatically generate missing element id values.</summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Snapshot.SnapshotRecursionStack">
            <summary>Internal helper class to detect and prevent recursive snapshot generation.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Snapshot.SnapshotRecursionStack.SnapshotRecursionStackState.ProfileUri">
            <summary>Canonical uri of a profile for which the snapshot is being generated.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Snapshot.SnapshotRecursionStack.SnapshotRecursionStackState.Navigator">
            <summary>
            Reference to the <see cref="T:Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator"/> that is generating the snapshot.
            Allows access to already generated elements.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotRecursionStack.OnStartRecursion">
            <summary>Initialize the recursion stack before generating a single snapshot element.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotRecursionStack.OnFinishRecursion">
            <summary>Verify and clear the recursion stack after generating a single snapshot element.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotRecursionStack.OnBeforeGenerateSnapshot(System.String)">
            <summary>Initialize the recursion stack before generating a full snapshot.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotRecursionStack.OnAfterGenerateSnapshot(System.String)">
            <summary>Verify and clear the recursion stack after generating a full snapshot.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotRecursionStack.OnBeforeExpandTypeProfile(System.String,System.String)">
            <summary>Verify recursive snapshot generation of the external profile with the specified url.</summary>
            <exception cref="T:System.NotSupportedException">Thrown when detecting recursive snapshot generation.</exception>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotRecursionStack.OnAfterExpandTypeProfile(System.String,System.String)">
            <summary>Signal that recursive snapshot generation of an external profile has finished.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Snapshot.SnapshotRecursionStack.CurrentProfileUri">
            <summary>Returns the uri of the profile for which the snapshot component is currently being generated, or <c>null</c>.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Snapshot.SnapshotRecursionStack.IsGenerating(System.String)">
            <summary>Determines if the snapshot of the profile with the specified uri is being generated.</summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.CachedResolverLoadingStrategy">
            <summary>Defines options for the <see cref="T:Hl7.Fhir.Specification.Source.CachedResolver"/> that determine how to load a resource.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Source.CachedResolverLoadingStrategy.LoadOnDemand">
            <summary>Return from cache, if present. Otherwise (re-)load from source and update cache.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Source.CachedResolverLoadingStrategy.LoadFromCache">
            <summary>Return from cache, if present. Do NOT (re-)load from source. Do NOT update cache.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Source.CachedResolverLoadingStrategy.LoadFromSource">
            <summary>Force (re-)load from source and update cache.</summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.CachedResolver">
            <summary>Reads and caches FHIR artifacts (Profiles, ValueSets, ...) from an internal <see cref="T:Hl7.Fhir.Specification.Source.IResourceResolver"/> instance.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Source.CachedResolver.DEFAULT_CACHE_DURATION">
            <summary>Default expiration time for cached entries.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CachedResolver.#ctor(Hl7.Fhir.Specification.Source.IResourceResolver,System.Int32)">
            <summary>Creates a new artifact resolver that caches loaded resources in memory.</summary>
            <param name="source">Internal resolver from which artifacts are initially resolved on a cache miss.</param>
            <param name="cacheDuration">Default expiration time of a cache entry, in seconds.</param>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.CachedResolver.Source">
            <summary>Returns a reference to the internal artifact source.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.CachedResolver.CacheDuration">
            <summary>Gets the default expiration time of a cache entry.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CachedResolver.ResolveByUri(System.String)">
            <summary>Retrieve the artifact with the specified url.</summary>
            <param name="url">The url of the target artifact.</param>
            <returns>A <see cref="T:Hl7.Fhir.Model.Resource"/> instance, or <c>null</c> if unavailable.</returns>
            <remarks>Return data from memory cache if available, otherwise load on demand from the internal artifact source.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CachedResolver.ResolveByCanonicalUri(System.String)">
            <summary>Retrieve the conformance resource with the specified canonical url.</summary>
            <param name="url">The canonical url of the target conformance resource.</param>
            <returns>A conformance <see cref="T:Hl7.Fhir.Model.Resource"/> instance, or <c>null</c> if unavailable.</returns>
            <remarks>Return data from memory cache if available, otherwise load on demand from the internal artifact source.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CachedResolver.ResolveByUri(System.String,Hl7.Fhir.Specification.Source.CachedResolverLoadingStrategy)">
            <summary>Retrieve the artifact with the specified url.</summary>
            <param name="url">The url of the target artifact.</param>
            <param name="strategy">Option flag to control the loading strategy.</param>
            <returns>A <see cref="T:Hl7.Fhir.Model.Resource"/> instance, or <c>null</c> if unavailable.</returns>
            <remarks>Return data from memory cache if available, otherwise load on demand from the internal artifact source.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CachedResolver.ResolveByCanonicalUri(System.String,Hl7.Fhir.Specification.Source.CachedResolverLoadingStrategy)">
            <summary>Retrieve the conformance resource with the specified canonical url.</summary>
            <param name="url">The canonical url of the target conformance resource.</param>
            <param name="strategy">Option flag to control the loading strategy.</param>
            <returns>A conformance <see cref="T:Hl7.Fhir.Model.Resource"/> instance, or <c>null</c> if unavailable.</returns>
            <remarks>Return data from memory cache if available, otherwise load on demand from the internal artifact source.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CachedResolver.InvalidateByUri(System.String)">
            <summary>Clear the cache entry for the artifact with the specified url, if it exists.</summary>
            <param name="url">The url of the target resource.</param>
            <returns><c>true</c> if succesful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CachedResolver.InvalidateByCanonicalUri(System.String)">
            <summary>Clear the cache entry for the conformance resource with the specified canonical uri, if it exists.</summary>
            <param name="url">The canonical url of the target conformance resource.</param>
            <returns><c>true</c> if succesful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CachedResolver.Clear">
            <summary>Clear the memory cache by removing all existing cache entries.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CachedResolver.IsCachedUri(System.String)">
            <summary>Determines if the memory cache contains a resource with the specified url.</summary>
            <returns><c>true</c> if the resource is cached, or <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CachedResolver.IsCachedCanonicalUri(System.String)">
            <summary>Determines if the memory cache contains a conformance resource with the specified canonical url.</summary>
            <returns><c>true</c> if the conformance resource is cached, or <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.CachedResolver.LoadResourceEventArgs">
            <summary>Event arguments for the <see cref="T:Hl7.Fhir.Specification.Source.CachedResolver.LoadResourceEventHandler"/> delegate.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.CachedResolver.LoadResourceEventArgs.Url">
            <summary>Returns the url of the cached resource.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.CachedResolver.LoadResourceEventArgs.Resource">
            <summary>Returns a reference to the cached resource.</summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.CachedResolver.LoadResourceEventHandler">
            <summary>Handles the <see cref="E:Hl7.Fhir.Specification.Source.CachedResolver.Load"/> event that is fired when a new resources is loaded into the cache.</summary>
        </member>
        <member name="E:Hl7.Fhir.Specification.Source.CachedResolver.Load">
            <summary>Occurs when a artifact is loaded into the cache.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CachedResolver.OnLoad(System.String,Hl7.Fhir.Model.Resource)">
            <summary>Called when an artifact is loaded into the cache.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.CachedResolver.CacheEntry`1.IsExpired">
            <summary>Returns a boolean value that indicates if the cache entry is expired.</summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.DirectorySource">
            <summary>Reads FHIR artifacts (Profiles, ValueSets, ...) from a directory on disk. Thread-safe.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySource.#ctor">
            <summary>
            Create a new <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/> instance to browse and resolve resources
            from the default <see cref="P:Hl7.Fhir.Specification.Source.DirectorySource.SpecificationDirectory"/>
            and using the default <see cref="T:Hl7.Fhir.Specification.Source.DirectorySourceSettings"/>.
            <para>
            Initialization is thread-safe. The source ensures that only a single thread will
            collect the artifact summaries, while any other threads will block.
            </para>
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySource.#ctor(System.String)">
            <summary>
            Create a new <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/> instance to browse and resolve resources
            from the specified <paramref name="contentDirectory"/>
            and using the default <see cref="T:Hl7.Fhir.Specification.Source.DirectorySourceSettings"/>.
            </summary>
            <para>
            Initialization is thread-safe. The source ensures that only a single thread will
            collect the artifact summaries, while any other threads will block.
            </para>
            <param name="contentDirectory">The file path of the target directory.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySource.#ctor(System.Boolean)">
            <summary>
            Create a new <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/> instance to browse and resolve resources
            from the specified content directory and optionally also from subdirectories.
            </summary>
            <param name="includeSubdirectories">
            Determines wether the <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/> should also
            recursively scan all subdirectories of the specified content directory.
            </param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySource.#ctor(System.String,System.Boolean)">
            <summary>
            Create a new <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/> instance to browse and resolve resources
            from the specified <paramref name="contentDirectory"/> and optionally also from subdirectories.
            </summary>
            <param name="contentDirectory">The file path of the target directory.</param>
            <param name="includeSubdirectories">
            Determines wether the <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/> should also
            recursively scan all subdirectories of the specified content directory.
            </param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySource.#ctor(Hl7.Fhir.Specification.Source.DirectorySourceSettings)">
            <summary>
            Create a new <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/> instance to browse and resolve resources
            using the specified <see cref="T:Hl7.Fhir.Specification.Source.DirectorySourceSettings"/>.
            </summary>
            <param name="settings">Configuration settings that control the behavior of the <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/>.</param>
            <exception cref="T:System.ArgumentNullException">One of the specified arguments is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySource.#ctor(System.String,Hl7.Fhir.Specification.Source.DirectorySourceSettings)">
            <summary>
            Create a new <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/> instance to browse and resolve resources
            from the specified <paramref name="contentDirectory"/>
            and using the specified <see cref="T:Hl7.Fhir.Specification.Source.DirectorySourceSettings"/>.
            <para>
            Initialization is thread-safe. The source ensures that only a single thread will
            collect the artifact summaries, while any other threads will block.
            </para>
            </summary>
            <param name="contentDirectory">The file path of the target directory.</param>
            <param name="settings">Configuration settings that control the behavior of the <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/>.</param>
            <exception cref="T:System.ArgumentNullException">One of the specified arguments is <c>null</c>.</exception>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.DirectorySource.ContentDirectory">
            <summary>Returns the full path to the content directory.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.DirectorySource.SpecificationDirectory">
            <summary>
            The default directory this artifact source will access for its files.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.DirectorySource.IncludeSubDirectories">
            <summary>
            Gets or sets a value that determines wether the <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/> should
            also include artifacts from (nested) subdirectories of the specified content directory.
            <para>
            Returns <c>false</c> by default.
            </para>
            </summary>
            <remarks>
            Enabling this setting requires the <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/> instance
            to recursively scan all xml and json files that exist in the target directory
            structure, which could unexpectedly turn into a long running operation.
            Therefore, consumers should usually try to avoid to enable this setting when
            the DirectorySource is targeting:
            <list type="bullet">
            <item>
            <description>Directories with many deeply nested subdirectories</description>
            </item>
            <item>
            <description>Common folders such as Desktop, My Documents etc.</description>
            </item>
            <item>
            <description>Drive root folders such as C:\</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.DirectorySource.Mask">
            <summary>
            Gets or sets the search string to match against the names of files in the content directory.
            The source will only provide resources from files that match the specified mask.
            The source will ignore all files that don't match the specified mask.
            Multiple masks can be split by '|'.
            </summary>
            <remarks>
            Mask filters are applied first, before any <see cref="P:Hl7.Fhir.Specification.Source.DirectorySource.Includes"/> and <see cref="P:Hl7.Fhir.Specification.Source.DirectorySource.Excludes"/> filters.
            </remarks>
            <value>
            Supported wildcards:
            <list type="table">
            <item>
            <term>*</term>
            <description>Matches zero or more characters within a file or directory name.</description>
            </item>
            <item>
            <term>?</term>
            <description>Matches any single character</description>
            </item>
            </list>
            </value>
            <example>
            <code>Mask = "v2*.*|*.StructureDefinition.*";</code>
            </example>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.DirectorySource.Masks">
            <summary>
            Gets or sets an array of search strings to match against the names of files in the content directory.
            The source will only provide resources from files that match the specified mask.
            The source will ignore all files that don't match the specified mask.
            </summary>
            <remarks>
            Mask filters are applied first, before <see cref="P:Hl7.Fhir.Specification.Source.DirectorySource.Includes"/> and <see cref="P:Hl7.Fhir.Specification.Source.DirectorySource.Excludes"/> filters.
            </remarks>
            <value>
            Supported wildcards:
            <list type="table">
            <item>
            <term>*</term>
            <description>Matches zero or more characters within a file or directory name.</description>
            </item>
            <item>
            <term>?</term>
            <description>Matches any single character</description>
            </item>
            </list>
            </value>
            <example>
            <code>Masks = new string[] { "v2*.*", "*.StructureDefinition.*" };</code>
            </example>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.DirectorySource.Includes">
            <summary>
            Gets or sets an array of search strings to match against the names of subdirectories of the content directory.
            The source will only provide resources from subdirectories that match the specified include mask(s).
            The source will ignore all subdirectories that don't match the specified include mask(s).
            </summary>
            <remarks>
            Include filters are applied after <see cref="P:Hl7.Fhir.Specification.Source.DirectorySource.Mask"/> filters and before <see cref="P:Hl7.Fhir.Specification.Source.DirectorySource.Excludes"/> filters.
            </remarks>
            <value>
            Supported wildcards:
            <list type="table">
            <item>
            <term>*</term>
            <description>Matches zero or more characters within a directory name.</description>
            </item>
            <item>
            <term>**</term>
            <description>
            Recursive wildcard.
            For example, <c>/hello/**/*</c> matches all descendants of <c>/hello</c>.
            </description>
            </item>
            </list>
            </value>
            <example>
            <code>Includes = new string[] { "profiles/**/*", "**/valuesets" };</code>
            </example>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.DirectorySource.Excludes">
            <summary>
            Gets or sets an array of search strings to match against the names of subdirectories of the content directory.
            The source will ignore all subdirectories that match the specified exclude mask(s).
            The source will only provide resources from subdirectories that don't match the specified exclude mask(s).
            </summary>
            <remarks>
            Exclude filters are applied last, after any <see cref="P:Hl7.Fhir.Specification.Source.DirectorySource.Mask"/> and <see cref="P:Hl7.Fhir.Specification.Source.DirectorySource.Includes"/> filters.
            </remarks>
            <value>
            Supported wildcards:
            <list type="table">
            <item>
            <term>*</term>
            <description>Matches zero or more characters within a directory name.</description>
            </item>
            <item>
            <term>**</term>
            <description>
            Recursive wildcard.
            For example, <c>/hello/**/*</c> matches all descendants of <c>/hello</c>.
            </description>
            </item>
            </list>
            </value>
            <example>
            <code>Excludes = new string[] { "profiles/**/old", "temp/**/*" };</code>
            </example>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.DirectorySource.DuplicateFilenameResolution">
            <summary>
            Specifies how the <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/> should process duplicate files with multiple serialization formats.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Source.DirectorySource.DuplicateFilenameResolution.PreferXml">
            <summary>Prefer file with ".xml" extension over duplicate file with ".json" extension.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Source.DirectorySource.DuplicateFilenameResolution.PreferJson">
            <summary>Prefer file with ".json" extension over duplicate file with ".xml" extension.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Source.DirectorySource.DuplicateFilenameResolution.KeepBoth">
            <summary>Return all files, do not filter duplicates.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.DirectorySource.FormatPreference">
            <summary>Gets or sets a value that determines how to process duplicate files with multiple serialization formats.</summary>
            <remarks>The default value is <see cref="F:Hl7.Fhir.Specification.Source.DirectorySource.DuplicateFilenameResolution.PreferXml"/>.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.DirectorySource.MultiThreaded">
            <summary>
            Determines if the <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/> instance should harvest artifact
            summary information in parallel on the thread pool.
            </summary>
            <remarks>
            By default, the <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/> harvests artifact summaries serially
            on the calling thread. However if this option is enabled, then the DirectorySource
            performs summary harvesting in parallel on the thread pool, in order to speed up
            the process. This is especially effective when the content directory contains many
            (nested) subfolders and files.
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.DirectorySource.ExcludeSummariesForUnknownArtifacts">
            <summary>
            Determines wether the <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/> should exclude
            artifact summaries for non-parseable (invalid or non-FHIR) content files.
            <para>
            By default (<c>false</c>), the source will generate summaries for all files
            that exist in the specified content directory and match the specified mask,
            including files that cannot be parsed (e.g. invalid or non-FHIR content).
            </para>
            <para>
            If <c>true</c>, then the source will only generate summaries for valid
            FHIR artifacts that exist in the specified content directory and match the
            specified mask. Unparseable files are ignored and excluded from the list
            of artifact summaries.
            </para>
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.DirectorySource.ParserSettings">
            <summary>Gets the configuration settings that the behavior of the PoCo parser.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.DirectorySource.XmlParserSettings">
            <summary>Gets the configuration settings that control the behavior of the XML parser.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.DirectorySource.JsonParserSettings">
            <summary>Gets the configuration settings that control the behavior of the JSON parser.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySource.Refresh">
            <summary>
            Re-index the specified content directory.
            <para>
            Clears the internal artifact summary cache.
            Re-indexes the current <see cref="P:Hl7.Fhir.Specification.Source.DirectorySource.ContentDirectory"/> and generates new summaries on demand,
            during the next resolving call.
            </para>
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySource.Refresh(System.Boolean)">
            <summary>
            Re-index the specified content directory.
            <para>
            Clears the internal artifact summary cache.
            Re-indexes the current <see cref="P:Hl7.Fhir.Specification.Source.DirectorySource.ContentDirectory"/> and generates new summaries.
            </para>
            <para>
            If <paramref name="force"/> equals <c>true</c>, then the source performs the re-indexing immediately.
            Otherwise, if <paramref name="force"/> equals <c>false</c>, then re-indexing is performed on demand
            during the next resolving request.
            </para>
            </summary>
            <param name="force">
            Determines if the source should perform re-indexing immediately (<c>true</c>) or on demand (<c>false</c>).
            </param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySource.Refresh(System.String[])">
            <summary>
            Re-index one or more specific artifact file(s).
            This method is NOT thread-safe!
            <para>
            Notifies the <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/> that specific files in the current
            <see cref="P:Hl7.Fhir.Specification.Source.DirectorySource.ContentDirectory"/> have been created, updated or deleted.
            The <paramref name="filePaths"/> argument should specify an array of artifact
            file paths that (may) have been deleted, modified or created.
            </para>
            <para>
            The source will:
            <list type="number">
            <item>remove any existing summary information for the specified artifacts, if available;</item>
            <item>try to harvest updated summary information from the specified artifacts, if they still exist.</item>
            </list>
            </para>
            </summary>
            <param name="filePaths">An array of artifact file path(s).</param>
            <returns>
            <c>true</c> if any summary information was updated, or <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySource.ListArtifactNames">
            <summary>Returns a list of artifact filenames.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySource.LoadArtifactByName(System.String)">
            <summary>
            Load the artifact with the specified file name.
            Also accepts relative file paths.
            </summary>
            <exception cref="T:System.InvalidOperationException">More than one file exists with the specified name.</exception>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySource.ListResourceUris(System.Nullable{Hl7.Fhir.Model.ResourceType})">
            <summary>List all resource uris, optionally filtered by type.</summary>
            <param name="filter">A <see cref="T:Hl7.Fhir.Model.ResourceType"/> enum value.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence of uri strings.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySource.FindCodeSystemByValueSet(System.String)">
            <summary>
            Find a <see cref="T:Hl7.Fhir.Model.CodeSystem"/> resource by a <see cref="T:Hl7.Fhir.Model.ValueSet"/> canonical url that contains all codes from that codesystem.
            </summary>
            <param name="valueSetUri">The canonical uri of a <see cref="T:Hl7.Fhir.Model.ValueSet"/> resource.</param>
            <returns>A <see cref="T:Hl7.Fhir.Model.CodeSystem"/> resource, or <c>null</c>.</returns>
            <remarks>
            It is very common for valuesets to represent all codes from a specific/smaller code system.
            These are indicated by he CodeSystem.valueSet element, which is searched here.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySource.FindConceptMaps(System.String,System.String)">
            <summary>Find <see cref="T:Hl7.Fhir.Model.ConceptMap"/> resources which map from the given source to the given target.</summary>
            <param name="sourceUri">An uri that is either the source uri, source ValueSet system or source StructureDefinition canonical url for the map.</param>
            <param name="targetUri">An uri that is either the target uri, target ValueSet system or target StructureDefinition canonical url for the map.</param>
            <returns>A sequence of <see cref="T:Hl7.Fhir.Model.ConceptMap"/> resources.</returns>
            <remarks>Either sourceUri may be null, or targetUri, but not both</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySource.FindNamingSystem(System.String)">
            <summary>Finds a <see cref="T:Hl7.Fhir.Model.NamingSystem"/> resource by matching any of a system's UniqueIds.</summary>
            <param name="uniqueId">The unique id of a <see cref="T:Hl7.Fhir.Model.NamingSystem"/> resource.</param>
            <returns>A <see cref="T:Hl7.Fhir.Model.NamingSystem"/> resource, or <c>null</c>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySource.ListSummaries">
            <summary>Returns a list of <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances with key information about each FHIR artifact provided by the source.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySource.LoadBySummary(Hl7.Fhir.Specification.Source.ArtifactSummary)">
            <summary>
            Load the resource from which the specified summary was generated.
            <para>
            This implementation annotates returned resource instances with an <seealso cref="T:Hl7.Fhir.Specification.Source.OriginAnnotation"/>
            that captures the value of the <see cref="P:Hl7.Fhir.Specification.Source.ArtifactSummary.Origin"/> property.
            The <seealso cref="M:Hl7.Fhir.Specification.Source.OriginAnnotationExtensions.GetOrigin(Hl7.Fhir.Model.Resource)"/> extension method 
            provides access to the annotated location.
            </para>
            </summary>
            <param name="summary">An <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instance generated by this source.</param>
            <returns>A new <see cref="T:Hl7.Fhir.Model.Resource"/> instance, or <c>null</c>.</returns>
            <remarks>
            The <see cref="P:Hl7.Fhir.Specification.Source.ArtifactSummary.Origin"/> and <see cref="P:Hl7.Fhir.Specification.Source.ArtifactSummary.Position"/>
            summary properties allow the source to identify and resolve the artifact.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySource.ResolveByUri(System.String)">
            <summary>Find a resource based on its relative or absolute uri.</summary>
            <param name="uri">A resource uri.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySource.ResolveByCanonicalUri(System.String)">
            <summary>Find a (conformance) resource based on its canonical uri.</summary>
            <param name="uri">The canonical url of a (conformance) resource.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySource.discoverFiles">
            <summary>
            List all files present in the directory (matching the mask, if given)
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySource.loadSummaries">
            <summary>Scan all xml files found by prepareFiles and find conformance resources and their id.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySource.loadResourceInternal``1(Hl7.Fhir.Specification.Source.ArtifactSummary)">
            <summary>Returns <c>null</c> if the specified <paramref name="summary"/> equals <c>null</c>.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySource.GetNavigatorStreamFactory">
            <summary>Return <see cref="T:Hl7.Fhir.Serialization.ConfigurableNavigatorStreamFactory"/> instance, updated with current Xml/Json parser settings.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySource.GetSummaries">
            <summary>
            Gets a list of <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances for files in the specified <see cref="P:Hl7.Fhir.Specification.Source.DirectorySource.ContentDirectory"/>.
            The artifact summaries are loaded on demand.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySource.GetFilePaths">
            <summary>
            Enumerate distinct file paths in the specified <see cref="P:Hl7.Fhir.Specification.Source.DirectorySource.ContentDirectory"/>.
            The underlying artifact summaries are loaded on demand.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySource.GetFileNames">
            <summary>
            Enumerate distinct file names in the specified <see cref="P:Hl7.Fhir.Specification.Source.DirectorySource.ContentDirectory"/>.
            The underlying artifact summaries are loaded on demand.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.DirectorySourceSettings">
            <summary>Configuration settings for the <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/> class.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Source.DirectorySourceSettings.DefaultFormatPreference">
            <summary>Default value of the <see cref="P:Hl7.Fhir.Specification.Source.DirectorySourceSettings.FormatPreference"/> configuration setting.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Source.DirectorySourceSettings.DefaultMasks">
            <summary>Default value of the <see cref="P:Hl7.Fhir.Specification.Source.DirectorySourceSettings.Masks"/> configuration setting (*.*)</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySourceSettings.CreateDefault">
            <summary>Creates a new <see cref="T:Hl7.Fhir.Specification.Source.DirectorySourceSettings"/> instance with default property values.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySourceSettings.#ctor">
            <summary>Default constructor. Creates a new <see cref="T:Hl7.Fhir.Specification.Source.DirectorySourceSettings"/> instance with default property values.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySourceSettings.#ctor(Hl7.Fhir.Specification.Source.DirectorySourceSettings)">
            <summary>Clone constructor. Generates a new <see cref="T:Hl7.Fhir.Specification.Source.DirectorySourceSettings"/> instance initialized from the state of the specified instance.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySourceSettings.CopyTo(Hl7.Fhir.Specification.Source.DirectorySourceSettings)">
            <summary>Copy all configuration settings to another instance.</summary>
            <param name="other">Another <see cref="T:Hl7.Fhir.Specification.Source.DirectorySourceSettings"/> instance.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.DirectorySourceSettings.Clone">
            <summary>Creates a new <see cref="T:Hl7.Fhir.Specification.Source.DirectorySourceSettings"/> object that is a copy of the current instance.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.DirectorySourceSettings.SpecificationDirectory">
            <summary>Returns the default content directory of the <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/>.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.DirectorySourceSettings.IncludeSubDirectories">
            <summary>
            Gets or sets a value that determines wether the <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/> should
            also include artifacts from (nested) subdirectories of the specified content directory.
            <para>
            Returns <c>false</c> by default.
            </para>
            </summary>
            <remarks>
            Enabling this setting requires the <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/> instance
            to recursively scan all xml and json files that exist in the target directory
            structure, which could unexpectedly turn into a long running operation.
            Therefore, consumers should usually try to avoid to enable this setting when
            the DirectorySource is targeting:
            <list type="bullet">
            <item>
            <description>Directories with many deeply nested subdirectories</description>
            </item>
            <item>
            <description>Common folders such as Desktop, My Documents etc.</description>
            </item>
            <item>
            <description>Drive root folders such as C:\</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.DirectorySourceSettings.Mask">
            <summary>
            Gets or sets the search string to match against the names of files in the content directory.
            The source will only provide resources from files that match the specified mask.
            The source will ignore all files that don't match the specified mask.
            Multiple masks can be split by '|'.
            <para>
            Returns <c>"*.*"</c> by default.
            </para>
            </summary>
            <remarks>
            Mask filters are applied first, before any <see cref="P:Hl7.Fhir.Specification.Source.DirectorySourceSettings.Includes"/> and <see cref="P:Hl7.Fhir.Specification.Source.DirectorySourceSettings.Excludes"/> filters.
            </remarks>
            <value>
            Supported wildcards:
            <list type="table">
            <item>
            <term>*</term>
            <description>Matches zero or more characters within a file or directory name.</description>
            </item>
            <item>
            <term>?</term>
            <description>Matches any single character</description>
            </item>
            </list>
            </value>
            <example>
            <code>Mask = "v2*.*|*.StructureDefinition.*";</code>
            </example>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.DirectorySourceSettings.Masks">
            <summary>
            Gets or sets an array of search strings to match against the names of files in the content directory.
            The source will only provide resources from files that match the specified mask.
            The source will ignore all files that don't match the specified mask.
            <para>
            Returns <c>{ "*.*" }</c> by default.
            </para>
            </summary>
            <remarks>
            Mask filters are applied first, before <see cref="P:Hl7.Fhir.Specification.Source.DirectorySourceSettings.Includes"/> and <see cref="P:Hl7.Fhir.Specification.Source.DirectorySourceSettings.Excludes"/> filters.
            </remarks>
            <value>
            Supported wildcards:
            <list type="table">
            <item>
            <term>*</term>
            <description>Matches zero or more characters within a file or directory name.</description>
            </item>
            <item>
            <term>?</term>
            <description>Matches any single character</description>
            </item>
            </list>
            </value>
            <example>
            <code>Masks = new string[] { "v2*.*", "*.StructureDefinition.*" };</code>
            </example>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.DirectorySourceSettings.Includes">
            <summary>
            Gets or sets an array of search strings to match against the names of subdirectories of the content directory.
            The source will only provide resources from subdirectories that match the specified include mask(s).
            The source will ignore all subdirectories that don't match the specified include mask(s).
            </summary>
            <remarks>
            Include filters are applied after <see cref="P:Hl7.Fhir.Specification.Source.DirectorySourceSettings.Mask"/> filters and before <see cref="P:Hl7.Fhir.Specification.Source.DirectorySourceSettings.Excludes"/> filters.
            </remarks>
            <value>
            Supported wildcards:
            <list type="table">
            <item>
            <term>*</term>
            <description>Matches zero or more characters within a directory name.</description>
            </item>
            <item>
            <term>**</term>
            <description>
            Recursive wildcard.
            For example, <c>/hello/**/*</c> matches all descendants of <c>/hello</c>.
            </description>
            </item>
            </list>
            </value>
            <example>
            <code>Includes = new string[] { "profiles/**/*", "**/valuesets" };</code>
            </example>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.DirectorySourceSettings.Excludes">
            <summary>
            Gets or sets an array of search strings to match against the names of subdirectories of the content directory.
            The source will ignore all subdirectories that match the specified exclude mask(s).
            The source will only provide resources from subdirectories that don't match the specified exclude mask(s).
            </summary>
            <remarks>
            Exclude filters are applied last, after any <see cref="P:Hl7.Fhir.Specification.Source.DirectorySourceSettings.Mask"/> and <see cref="P:Hl7.Fhir.Specification.Source.DirectorySourceSettings.Includes"/> filters.
            </remarks>
            <value>
            Supported wildcards:
            <list type="table">
            <item>
            <term>*</term>
            <description>Matches zero or more characters within a directory name.</description>
            </item>
            <item>
            <term>**</term>
            <description>
            Recursive wildcard.
            For example, <c>/hello/**/*</c> matches all descendants of <c>/hello</c>.
            </description>
            </item>
            </list>
            </value>
            <example>
            <code>Excludes = new string[] { "profiles/**/old", "temp/**/*" };</code>
            </example>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.DirectorySourceSettings.FormatPreference">
            <summary>Gets or sets a value that determines how to process duplicate files with multiple serialization formats.</summary>
            <remarks>The default value is <see cref="F:Hl7.Fhir.Specification.Source.DirectorySource.DuplicateFilenameResolution.PreferXml"/>.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.DirectorySourceSettings.MultiThreaded">
            <summary>
            Determines if the <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/> instance should harvest artifact
            summary information in parallel on the thread pool.
            </summary>
            <remarks>
            By default, the <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/> harvests artifact summaries serially
            on the calling thread. However if this option is enabled, then the DirectorySource
            performs summary harvesting in parallel on the thread pool, in order to speed up
            the process. This is especially effective when the content directory contains many
            (nested) subfolders and files.
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.DirectorySourceSettings.SummaryDetailsHarvesters">
            <summary>
            An array of <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryHarvester"/> delegates for harvesting
            summary information from an artifact.
            </summary>
            <remarks>
            Allows consumers to harvest custom summary properties,
            depending on the resource type or other (previously harvested) information.
            <para>
            By default, if this array is null or empty, the
            <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator"/> calls the built-in default harvesters
            as defined by the <see cref="F:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator.ConformanceHarvesters"/> array.
            However if the caller specifies one or more harvester delegates, then the summary
            generator calls only the provided delegates, in the specified order.
            A custom delegate array may include one or more of the default harvesters.
            </para>
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.DirectorySourceSettings.ExcludeSummariesForUnknownArtifacts">
            <summary>
            Determines the behavior of the internal <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator"/>
            for handling non-parseable (invalid or non-FHIR) content files.
            <para>
            By default (<c>false</c>), the source will generate summaries for all files
            that exist in the specified content directory and match the specified mask,
            including files that cannot be parsed (e.g. invalid or non-FHIR content).
            </para>
            <para>
            If <c>true</c>, then the source will only generate summaries for valid
            FHIR artifacts that exist in the specified content directory and match the
            specified mask. Unparseable files are ignored and excluded from the result.
            </para>
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.DirectorySourceSettings.ParserSettings">
            <summary>
            Gets or sets the configuration settings that control the behavior of the PoCo parser.
            <para>Never returns <c>null</c>. Assigning <c>null</c> reverts back to default settings.</para>
            </summary>
            <value>A <see cref="P:Hl7.Fhir.Specification.Source.DirectorySourceSettings.ParserSettings"/> instance.</value>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.DirectorySourceSettings.XmlParserSettings">
            <summary>
            Gets the configuration settings that control the behavior of the XML parser.
            <para>Never returns <c>null</c>. Assigning <c>null</c> reverts back to default settings.</para>
            </summary>
            <value>A <see cref="T:Hl7.Fhir.Serialization.FhirXmlParsingSettings"/> instance.</value>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.DirectorySourceSettings.JsonParserSettings">
            <summary>
            Gets the configuration settings that control the behavior of the JSON parser.
            <para>Never returns <c>null</c>. Assigning <c>null</c> reverts back to default settings.</para>
            </summary>
            <value>A <see cref="T:Hl7.Fhir.Serialization.FhirJsonParsingSettings"/> instance.</value>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.IArtifactSource">
            <summary>Interface for browsing and resolving FHIR artifacts by filename.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.IArtifactSource.ListArtifactNames">
            <summary>Gets a list of artifact filenames.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.IArtifactSource.LoadArtifactByName(System.String)">
            <summary>Load the artifact with the specified filename.</summary>
            <remarks>
            This method does not support duplicate file names in separate subfolders of the content directory.
            The <seealso cref="T:Hl7.Fhir.Specification.Source.ISummarySource"/> interface provides methods to unambiguously retrieve specific
            artifacts from the associated summary instance.
            </remarks>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.IConformanceSource">
            <summary>Interface for browsing and resolving FHIR conformance resources.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.IConformanceSource.ListResourceUris(System.Nullable{Hl7.Fhir.Model.ResourceType})">
            <summary>List all resource uris for the resources managed by the source, optionally filtered by type. (these are not Canonical Uris)</summary>
            <param name="filter">A <see cref="T:Hl7.Fhir.Model.ResourceType"/> enum value.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence of uri strings.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.IConformanceSource.FindCodeSystemByValueSet(System.String)">
            <summary>
            Find a <see cref="T:Hl7.Fhir.Model.CodeSystem"/> resource by a <see cref="T:Hl7.Fhir.Model.ValueSet"/> canonical url that contains all codes from that codesystem.
            </summary>
            <param name="valueSetUri">The canonical uri of a <see cref="T:Hl7.Fhir.Model.ValueSet"/> resource.</param>
            <returns>A <see cref="T:Hl7.Fhir.Model.CodeSystem"/> resource, or <c>null</c>.</returns>
            <remarks>
            It is very common for valuesets to represent all codes from a specific/smaller code system.
            These are indicated by he CodeSystem.valueSet element, which is searched here.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.IConformanceSource.FindConceptMaps(System.String,System.String)">
            <summary>Find <see cref="T:Hl7.Fhir.Model.ConceptMap"/> resources which map from the given source to the given target.</summary>
            <param name="sourceUri">An uri that is either the source uri, source ValueSet system or source StructureDefinition canonical url for the map.</param>
            <param name="targetUri">An uri that is either the target uri, target ValueSet system or target StructureDefinition canonical url for the map.</param>
            <returns>A sequence of <see cref="T:Hl7.Fhir.Model.ConceptMap"/> resources.</returns>
            <remarks>Either sourceUri may be null, or targetUri, but not both</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.IConformanceSource.FindNamingSystem(System.String)">
            <summary>Finds a <see cref="T:Hl7.Fhir.Model.NamingSystem"/> resource by matching any of a system's UniqueIds.</summary>
            <param name="uniqueId">The unique id of a <see cref="T:Hl7.Fhir.Model.NamingSystem"/> resource.</param>
            <returns>A <see cref="T:Hl7.Fhir.Model.NamingSystem"/> resource, or <c>null</c>.</returns>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.IResourceResolver">
            <summary>Interface for resolving FHIR artifacts by (canonical) uri.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.IResourceResolver.ResolveByUri(System.String)">
            <summary>Find a resource based on its relative or absolute uri.</summary>
            <param name="uri">A resource uri.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.IResourceResolver.ResolveByCanonicalUri(System.String)">
            <summary>Find a (conformance) resource based on its canonical uri.</summary>
            <param name="uri">The canonical url of a (conformance) resource.</param>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.ISummarySource">
            <summary>
            Interface for browsing and resolving FHIR artifacts by summary.
            Efficiently generate summaries and load resources on demand.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ISummarySource.ListSummaries">
            <summary>
            Returns a list of artifact summaries with key information
            from each FHIR artifact provided by the source.
            </summary>
            <returns>A sequence of <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances.</returns>
            <remarks>
            Catches and returns runtime exceptions as error <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances
            with <see cref="P:Hl7.Fhir.Specification.Source.ArtifactSummary.IsFaulted"/> equal to <c>true</c>
            and the <see cref="P:Hl7.Fhir.Specification.Source.ArtifactSummary.Error"/> property returning the exception.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ISummarySource.LoadBySummary(Hl7.Fhir.Specification.Source.ArtifactSummary)">
            <summary>Load the resource from which the specified summary was generated.</summary>
            <param name="summary">An <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instance generated by this source.</param>
            <returns>A new <see cref="T:Hl7.Fhir.Model.Resource"/> instance, or <c>null</c>.</returns>
            <remarks>
            The <see cref="P:Hl7.Fhir.Specification.Source.ArtifactSummary.Origin"/> and <see cref="P:Hl7.Fhir.Specification.Source.ArtifactSummary.Position"/>
            summary properties allow the source to identify and resolve the artifact.
            </remarks>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.MultiResolver">
            <summary>
            Reads FHIR artifacts (Profiles, ValueSets, ...) from a list of other IArtifactSources
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.MultiResolver.#ctor(System.Collections.Generic.IEnumerable{Hl7.Fhir.Specification.Source.IResourceResolver})">
            <summary>
            Custom implementation of the artifact resolver
            </summary>
            <param name="sources">A custom set of IArtifact sources. Resolving occurs in order of input</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.MultiResolver.#ctor(Hl7.Fhir.Specification.Source.IResourceResolver[])">
            <summary>
            Custom implementation of the artifact resolver
            </summary>
            <param name="sources">A custom set of IArtifact sources. Resolving occurs in order of input</param>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.OriginAnnotation">
            <summary>Annotation for the location from which a resource was originally resolved.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.OriginAnnotation.#ctor(System.String)">
            <summary>Creates a new <see cref="T:Hl7.Fhir.Specification.Source.OriginAnnotation"/> instance for the specified resource location.</summary>
            <param name="origin">The location from where a resource was originally resolved.</param>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.OriginAnnotation.Origin">
            <summary>Returns the location from which the resource was originally resolved.</summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.OriginAnnotationExtensions">
            <summary>Helper methods to get/set <see cref="T:Hl7.Fhir.Specification.Source.OriginAnnotation"/>s on resource instances.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.OriginAnnotationExtensions.SetOrigin(Hl7.Fhir.Model.Resource,System.String)">
            <summary>Annotate the resource with the location from which the resource was originally resolved.</summary>
            <param name="resource">A resource instance.</param>
            <param name="origin">The location from which the resource was originally resolved.</param>
            <remarks>Uses the <see cref="T:Hl7.Fhir.Specification.Source.OriginAnnotation"/> annotation class.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.OriginAnnotationExtensions.GetOrigin(Hl7.Fhir.Model.Resource)">
            <summary>Get the annotated original resource location, if it exists.</summary>
            <param name="resource">A resource instance.</param>
            <returns>The original resource location, if annotated, or <c>null</c> otherwise.</returns>
            <remarks>Uses the <see cref="T:Hl7.Fhir.Specification.Source.OriginAnnotation"/> annotation class.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ResourceResolverExtensions.FindValueSet(Hl7.Fhir.Specification.Source.IResourceResolver,System.String)">
            <summary>
            Find a ValueSet by canonical url
            </summary>
            <param name="source"></param>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ResourceResolverExtensions.FindCodeSystem(Hl7.Fhir.Specification.Source.IResourceResolver,System.String)">
            <summary>
            Find a CodeSystem by canonical url.
            </summary>
            <param name="source"></param>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ResourceResolverExtensions.FindAll``1(Hl7.Fhir.Specification.Source.IConformanceSource)">
            <summary>
            List all the 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ResourceResolverExtensions.GetStructureDefinitionForTypeCode(Hl7.Fhir.Specification.Source.IResourceResolver,Hl7.Fhir.Model.FhirUri)">
            <summary>Resolve a <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> from a TypeRef.Code element, handle unknown/custom core types.</summary>
            <param name="resolver">An <see cref="T:Hl7.Fhir.Specification.Source.IArtifactSource"/> reference.</param>
            <param name="typeCodeElement">A <see cref="P:Hl7.Fhir.Model.ElementDefinition.TypeRefComponent.CodeElement"/> reference.</param>
            <returns>A <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> instance, or <c>null</c>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ResourceResolverExtensions.IsValidTypeProfile(Hl7.Fhir.Specification.Source.IResourceResolver,System.String,Hl7.Fhir.Model.StructureDefinition)">
            <summary>
            Determines if the specified <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> is compatible with <paramref name="type"/>.
            Walks up the profile hierarchy by resolving base profiles from the current <see cref="T:Hl7.Fhir.Specification.Source.IResourceResolver"/> instance.
            </summary>
            <returns><c>true</c> if the profile type is equal to or derived from the specified type, or <c>false</c> otherwise.</returns>
            <param name="resolver">A resource resolver instance.</param>
            <param name="type">A FHIR type.</param>
            <param name="profile">A StructureDefinition instance.</param>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.SnapshotSource">
            <summary>
            Resolves resources from an internal <see cref="T:Hl7.Fhir.Specification.Source.IResourceResolver"/> instance.
            Ensures that resolved <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> resources have a snapshot component (re-generate on demand).
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.SnapshotSource.#ctor(Hl7.Fhir.Specification.Snapshot.SnapshotGenerator)">
            <summary>Creates a new instance of the <see cref="T:Hl7.Fhir.Specification.Source.SnapshotSource"/> for the specified snapshot generator instance.</summary>
            <param name="generator">A <see cref="T:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator"/> instance.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.SnapshotSource.#ctor(Hl7.Fhir.Specification.Source.IResourceResolver,Hl7.Fhir.Specification.Snapshot.SnapshotGeneratorSettings)">
            <summary>Creates a new instance of the <see cref="T:Hl7.Fhir.Specification.Source.SnapshotSource"/> for the specified internal resolver.</summary>
            <param name="source">An internal <see cref="T:Hl7.Fhir.Specification.Source.IResourceResolver"/> instance. The implementation should be idempotent (i.e. cached), so the generated snapshots are persisted in memory.</param>
            <param name="settings">Configuration settings for the snapshot generator.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.SnapshotSource.#ctor(Hl7.Fhir.Specification.Source.IResourceResolver,System.Boolean)">
            <summary>Creates a new instance of the <see cref="T:Hl7.Fhir.Specification.Source.SnapshotSource"/> for the specified internal resolver.</summary>
            <param name="source">An internal <see cref="T:Hl7.Fhir.Specification.Source.IResourceResolver"/> instance. The implementation should be idempotent (i.e. cached), so the generated snapshots are persisted in memory.</param>
            <param name="regenerate">Determines if the source should always discard any existing snapshot components provided by the internal source and force re-generation.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.SnapshotSource.#ctor(Hl7.Fhir.Specification.Source.IResourceResolver)">
            <summary>Creates a new instance of the <see cref="T:Hl7.Fhir.Specification.Source.SnapshotSource"/> for the specified internal resolver.</summary>
            <param name="source">An internal <see cref="T:Hl7.Fhir.Specification.Source.IResourceResolver"/> instance. The implementation should be idempotent (i.e. cached), so the generated snapshots are persisted in memory.</param>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.SnapshotSource.Source">
            <summary>Returns a reference to the internal artifact source, as specified in the constructor.</summary>
            <remarks>Used by the snapshot <see cref="P:Hl7.Fhir.Specification.Source.SnapshotSource.Generator"/> to resolve references to external profiles.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.SnapshotSource.Generator">
            <summary>Returns the internal <see cref="T:Hl7.Fhir.Specification.Snapshot.SnapshotGenerator"/> instance used by the source.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.SnapshotSource.ResolveByUri(System.String)">
            <summary>Find a resource based on its relative or absolute uri.</summary>
            <remarks>The source ensures that resolved <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> instances have a snapshot component.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.SnapshotSource.ResolveByCanonicalUri(System.String)">
            <summary>Find a (conformance) resource based on its canonical uri.</summary>
            <remarks>The source ensures that resolved <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> instances have a snapshot component.</remarks>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.SourceFactory">
            <summary>
            Reads FHIR artifacts (Profiles, ValueSets, ...) using a list of other IArtifactSources
            </summary>    
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.SourceFactory.CreateDefault">
            <summary>
            Creates a default non-cached artifact resolver
            Default only searches in the executable directory files and the core zip. 
            This non-cached resolver is primary for testing purposes.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.SourceFactory.CreateOffline">
            <summary>
            Creates an offline non-cached artifact resolver
            Default only searches in the executable directory files and the core zip. 
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.SourceFactory.CreateCachedDefault">
            <summary>
            Creates a default cached artifact resolver
            Default only searches in the executable directory files and the core zip. 
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.SourceFactory.CreateCachedOffline">
            <summary>
            Creates a default cached artifact resolver
            Default only searches in the executable directory files and the core zip. 
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.SummarySourceExtensions">
            <summary>Extension methods for the <see cref="T:Hl7.Fhir.Specification.Source.ISummarySource"/> interface.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.SummarySourceExtensions.LoadBySummary``1(Hl7.Fhir.Specification.Source.ISummarySource,Hl7.Fhir.Specification.Source.ArtifactSummary)">
            <summary>Load the resource from which the specified summary was generated.</summary>
            <param name="source">A <see cref="T:Hl7.Fhir.Specification.Source.ISummarySource"/> instance.</param>
            <param name="summary">An <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instance generated by this source.</param>
            <typeparam name="T">The resource type to return.</typeparam>
            <returns>A new resource instance of type <typeparamref name="T"/>, or <c>null</c>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.SummarySourceExtensions.ListSummaryErrors(Hl7.Fhir.Specification.Source.ISummarySource)">
            <summary>Returns a list of <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances with error information.</summary>
            <param name="source">A <see cref="T:Hl7.Fhir.Specification.Source.ISummarySource"/> instance.</param>
            <returns>A sequence of <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.SummarySourceExtensions.ListSummaries(Hl7.Fhir.Specification.Source.ISummarySource,Hl7.Fhir.Model.ResourceType)">
            <summary>Returns a list of <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances for resources of the specified <see cref="T:Hl7.Fhir.Model.ResourceType"/>.</summary>
            <param name="source">A <see cref="T:Hl7.Fhir.Specification.Source.ISummarySource"/> instance.</param>
            <param name="resourceType">A <see cref="T:Hl7.Fhir.Model.ResourceType"/> enum value.</param>
            <returns>A sequence of <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances.</returns>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.ArtifactSummary">
            <summary>Represents summary information harvested from a FHIR artifact.</summary>
            <remarks>
            Created by the <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator"/> class from
            a property bag containing the harvested summary information.
            <para>
            Implements the <see cref="T:Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag"/> interface
            to support extension methods for accessing specific harvested properties.
            </para>
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.ArtifactSummary.Empty">
            <summary>Returns an empty <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instance.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummary.FromException(System.Exception)">
            <summary>Create a new <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instance from the specified exception.</summary>
            <param name="error">An exception that occured while harvesting artifact summary information.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummary.FromException(System.Exception,System.String)">
            <summary>Create a new <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instance from the specified exception.</summary>
            <param name="error">An exception that occured while harvesting artifact summary information.</param>
            <param name="origin">The original location of the target artifact.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummary.#ctor(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Create a new <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instance from a set of harvested artifact summary properties.</summary>
            <param name="properties">A property bag with harvested artifact summary information.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummary.#ctor(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag,System.Exception)">
            <summary>
            Create a new <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instance from a set of harvested artifact summary properties
            and a runtime exception that occured during harvesting.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.ArtifactSummary.Error">
            <summary>Returns information about errors that occured while generating the artifact summary.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.ArtifactSummary.IsFaulted">
            <summary>Indicates if any errors occured while generating the artifact summary.</summary>
            <remarks>If <c>true</c>, then the <see cref="P:Hl7.Fhir.Specification.Source.ArtifactSummary.Error"/> property returns detailed error information.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.ArtifactSummary.IsFhirResource">
            <summary>Indicates if the summary describes a valid FHIR resource.</summary>
            <value>Returns <c>true</c> if <see cref="P:Hl7.Fhir.Specification.Source.ArtifactSummary.ResourceType"/> is known (not <c>null</c>), or <c>false</c> otherwise.</value>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.ArtifactSummary.Origin">
            <summary>Gets the original location of the associated artifact.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.ArtifactSummary.FileSize">
            <summary>Gets the size of the original artifact file.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.ArtifactSummary.LastModified">
            <summary>Gets the last modified date of the original artifact file.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.ArtifactSummary.SerializationFormat">
            <summary>
            Get a string value that represents the artifact serialization format,
            as defined by the <see cref="T:Hl7.Fhir.Serialization.FhirSerializationFormats"/> class, if available.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.ArtifactSummary.Position">
            <summary>
            Gets an opaque value that represents the position of the artifact within the container.
            Allows the <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/> to retrieve and deserialize the associated artifact.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.ArtifactSummary.ResourceTypeName">
            <summary>Gets the type name of the resource.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.ArtifactSummary.ResourceType">
            <summary>Gets the type of the resource, parsed from the original <see cref="P:Hl7.Fhir.Specification.Source.ArtifactSummary.ResourceTypeName"/> value, or <c>null</c>.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.ArtifactSummary.ResourceUri">
            <summary>Gets the resource uri.</summary>
            <remarks>The <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/> generates virtual uri values for resources that are not bundle entries.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.ArtifactSummary.IsBundleEntry">
            <summary>Returns <c>true</c> if the summary describes a Bundle entry resource.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummary.GetEnumerator">
            <summary>Returns an enumerator that iterates through the summary properties.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.ArtifactSummary.Count">
            <summary>Gets the number of harvested property values.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.ArtifactSummary.Item(System.String)">
            <summary>Gets the property value associated with the specified property key.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.ArtifactSummary.Keys">
            <summary>Gets a collection of property keys.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.ArtifactSummary.Values">
            <summary>Gets a collection of property values.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummary.ContainsKey(System.String)">
            <summary>Determines wether the summary contains a property value for the specified property key.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummary.TryGetValue(System.String,System.Object@)">
            <summary>Gets the property value associated with the specified property key.</summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.ArtifactSummaryExtensions">
            <summary>Extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequences.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummaryExtensions.Errors(System.Collections.Generic.IEnumerable{Hl7.Fhir.Specification.Source.ArtifactSummary})">
            <summary>Filter <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances with errors.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummaryExtensions.OfResourceType(System.Collections.Generic.IEnumerable{Hl7.Fhir.Specification.Source.ArtifactSummary},Hl7.Fhir.Model.ResourceType)">
            <summary>Filter <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances for resources with the specified <see cref="T:Hl7.Fhir.Model.ResourceType"/>.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummaryExtensions.OfResourceType(System.Collections.Generic.IEnumerable{Hl7.Fhir.Specification.Source.ArtifactSummary},System.Nullable{Hl7.Fhir.Model.ResourceType})">
            <summary>
            Filter <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances for resources with the specified <see cref="T:Hl7.Fhir.Model.ResourceType"/>.
            If <paramref name="resourceType"/> equals <c>null</c>, then filter summaries for all valid FHIR resources.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummaryExtensions.FhirResources(System.Collections.Generic.IEnumerable{Hl7.Fhir.Specification.Source.ArtifactSummary})">
            <summary>Filter <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances for valid FHIR resources.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummaryExtensions.FindNamingSystems(System.Collections.Generic.IEnumerable{Hl7.Fhir.Specification.Source.ArtifactSummary},System.String)">
            <summary>Find <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances for <see cref="T:Hl7.Fhir.Model.NamingSystem"/> resources with the specified uniqueId value.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummaryExtensions.ConformanceResources(System.Collections.Generic.IEnumerable{Hl7.Fhir.Specification.Source.ArtifactSummary})">
            <summary>Filter <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances for conformance resources.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummaryExtensions.FindConformanceResources(System.Collections.Generic.IEnumerable{Hl7.Fhir.Specification.Source.ArtifactSummary},System.String)">
            <summary>Find <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances for conformance resources with the specified canonical url.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummaryExtensions.FindCodeSystems(System.Collections.Generic.IEnumerable{Hl7.Fhir.Specification.Source.ArtifactSummary},System.String)">
            <summary>Filter <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances for <see cref="T:Hl7.Fhir.Model.CodeSystem"/> resources with the specified valueSet uri.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummaryExtensions.FindConceptMaps(System.Collections.Generic.IEnumerable{Hl7.Fhir.Specification.Source.ArtifactSummary},System.String,System.String)">
            <summary>Find <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances for <see cref="T:Hl7.Fhir.Model.ConceptMap"/> resources with the specified source and/or target uri(s).</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummaryExtensions.FromFile(System.Collections.Generic.IEnumerable{Hl7.Fhir.Specification.Source.ArtifactSummary},System.String)">
            <summary>Find <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instance(s) for resources contained in the specified file.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummaryExtensions.ResolveByUri(System.Collections.Generic.IEnumerable{Hl7.Fhir.Specification.Source.ArtifactSummary},System.String)">
            <summary>Resolve the <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> for the resource with the specified uri.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummaryExtensions.ResolveByCanonicalUri(System.Collections.Generic.IEnumerable{Hl7.Fhir.Specification.Source.ArtifactSummary},System.String)">
            <summary>Resolve the <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> for the comformance resource with the specified canonical uri.</summary>
            <exception cref="T:Hl7.Fhir.Support.ResolvingConflictException">The <see cref="T:Hl7.Fhir.Specification.Source.ISummarySource"/> instance encountered conflicting Conformance Resource artifacts with the same canonical url identifier.</exception>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummaryExtensions.ResolveNamingSystem(System.Collections.Generic.IEnumerable{Hl7.Fhir.Specification.Source.ArtifactSummary},System.String)">
            <summary>Resolve the <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> for the <see cref="T:Hl7.Fhir.Model.NamingSystem"/> resource with the specified uniqueId.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummaryExtensions.ResolveCodeSystem(System.Collections.Generic.IEnumerable{Hl7.Fhir.Specification.Source.ArtifactSummary},System.String)">
            <summary>Resolve the <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> for the <see cref="T:Hl7.Fhir.Model.CodeSystem"/> resource with the specified ValueSet uri.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummaryExtensions.ResolveConceptMap(System.Collections.Generic.IEnumerable{Hl7.Fhir.Specification.Source.ArtifactSummary},System.String,System.String)">
            <summary>Resolve the <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> for the <see cref="T:Hl7.Fhir.Model.ConceptMap"/> resource with the specified source and/or target uri(s).</summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.ArtifactSummaryProperties">
            <summary>For accessing common artifact summary properties stored in an <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryPropertyBag"/>.</summary>
            <remarks>
            The <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator"/> creates an <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryPropertyBag"/> 
            for each artifact and adds a set of common summary properties, independent of the resource type.
            This class provides property keys and extension methods to access the common properties.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummaryProperties.GetValueOrDefault(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag,System.String)">
            <summary>Try to retrieve the property value for the specified key.</summary>
            <param name="properties">An artifact summary property bag.</param>
            <param name="key">A property key.</param>
            <returns>An object value, or <c>null</c>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummaryProperties.GetValueOrDefault``1(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag,System.String)">
            <summary>Try to retrieve the property value for the specified key.</summary>
            <param name="properties">An artifact summary property bag.</param>
            <param name="key">A property key.</param>
            <typeparam name="T">The type of the property value.</typeparam>
            <returns>A value of type <typeparamref name="T"/>, or <c>null</c>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummaryProperties.GetOrigin(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Get the Origin property value from the specified artifact summary property bag, if available.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummaryProperties.GetFileSize(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Get the Size property value from the specified artifact summary property bag, if available.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummaryProperties.GetLastModified(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Get the LastModified property value from the specified artifact summary property bag, if available.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummaryProperties.GetSerializationFormat(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>
            Get a string value from the specified artifact summary property bag that represents the artifact
            serialization format, as defined by the <see cref="T:Hl7.Fhir.Serialization.FhirSerializationFormats"/> class, if available.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummaryProperties.GetPosition(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Get the Position property value from the specified artifact summary property bag, if available.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummaryProperties.GetTypeName(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Get the TypeName property value from the specified artifact summary property bag, if available.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummaryProperties.GetResourceUri(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Get the ResourceUri property value from the specified artifact summary property bag, if available.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ArtifactSummaryProperties.IsBundleEntry(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Returns <c>true</c> if the summary describes a Bundle entry.</summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.NamingSystemSummaryProperties">
            <summary>For harvesting specific summary information from a <see cref="T:Hl7.Fhir.Model.NamingSystem"/> resource.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.NamingSystemSummaryProperties.IsNamingSystemSummary(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Determines if the specified instance represents summary information about a <see cref="T:Hl7.Fhir.Model.NamingSystem"/> resource.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.NamingSystemSummaryProperties.Harvest(Hl7.Fhir.ElementModel.ISourceNode,Hl7.Fhir.Specification.Summary.ArtifactSummaryPropertyBag)">
            <summary>Harvest specific summary information from a <see cref="T:Hl7.Fhir.Model.NamingSystem"/> resource.</summary>
            <returns><c>true</c> if the current target represents a <see cref="T:Hl7.Fhir.Model.NamingSystem"/> resource, or <c>false</c> otherwise.</returns>
            <remarks>The <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator"/> calls this method through a <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryHarvester"/> delegate.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.NamingSystemSummaryProperties.GetNamingSystemUniqueId(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Get the <c>NamingSystem.uniqueId</c> property value from the specified artifact summary property bag, if available.</summary>
            <remarks>Only applies to summaries of <see cref="T:Hl7.Fhir.Model.NamingSystem"/> resources.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.NamingSystemSummaryProperties.HasNamingSystemUniqueId(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag,System.String)">
            <summary>
            Determines if the current summary properties represent a <see cref="T:Hl7.Fhir.Model.NamingSystem"/>
            resource with the specified <c>uniqueId</c> value.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.ConformanceSummaryProperties">
            <summary>For harvesting common summary information from a conformance resource.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ConformanceSummaryProperties.IsConformanceSummary(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Determines if the specified instance represents summary information about a conformance resource.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ConformanceSummaryProperties.Harvest(Hl7.Fhir.ElementModel.ISourceNode,Hl7.Fhir.Specification.Summary.ArtifactSummaryPropertyBag)">
            <summary>Harvest common summary information from a conformance resource.</summary>
            <returns><c>true</c> if the current target represents a conformance resource, or <c>false</c> otherwise.</returns>
            <remarks>
            The <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator"/> calls this method through a <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryHarvester"/> delegate.
            Also called directly by other <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryHarvester"/> delegates to harvest summary
            information common to all conformance resources, before harvesting any additional type specific
            information.
            </remarks>
            <seealso cref="T:Hl7.Fhir.Specification.Source.StructureDefinitionSummaryProperties"/>
            <seealso cref="T:Hl7.Fhir.Specification.Source.ConceptMapSummaryProperties"/>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ConformanceSummaryProperties.GetConformanceCanonicalUrl(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Get the canonical <c>url</c> property value from the specified artifact summary property bag, if available.</summary>
            <remarks>Only applies to summaries of conformance resources.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ConformanceSummaryProperties.GetConformanceVersion(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Get the <c>version</c> property value from the specified artifact summary property bag, if available.</summary>
            <remarks>Only applies to summaries of conformance resources.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ConformanceSummaryProperties.GetConformanceName(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Get the <c>name</c> property value from the specified artifact summary property bag, if available.</summary>
            <remarks>Only applies to summaries of conformance resources.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ConformanceSummaryProperties.GetConformanceStatus(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Get the <c>status</c> property value from the specified artifact summary property bag, if available.</summary>
            <remarks>Only applies to summaries of conformance resources.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ConformanceSummaryProperties.GetPublicationStatus(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Get the <c>status</c> property value from the specified artifact summary property bag, if available.</summary>
            <remarks>Only applies to summaries of conformance resources.</remarks>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.StructureDefinitionSummaryProperties">
            <summary>For harvesting specific summary information from a <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> resource.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.StructureDefinitionSummaryProperties.IsStructureDefinitionSummary(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Determines if the specified instance represents summary information about a <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> resource.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.StructureDefinitionSummaryProperties.Harvest(Hl7.Fhir.ElementModel.ISourceNode,Hl7.Fhir.Specification.Summary.ArtifactSummaryPropertyBag)">
            <summary>Harvest specific summary information from a <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> resource.</summary>
            <returns><c>true</c> if the current target represents a <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> resource, or <c>false</c> otherwise.</returns>
            <remarks>The <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator"/> calls this method from a <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryHarvester"/> delegate.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.StructureDefinitionSummaryProperties.GetStructureDefinitionFhirVersion(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Get the <c>StructureDefinition.fhirVersion</c> property value from the specified artifact summary property bag, if available.</summary>
            <remarks>Only applies to summaries of <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> resources.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.StructureDefinitionSummaryProperties.GetStructureDefinitionKind(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Get the <c>StructureDefinition.kind</c> property value from the specified artifact summary property bag, if available.</summary>
            <remarks>Only applies to summaries of <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> resources.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.StructureDefinitionSummaryProperties.GetStructureDefinitionContext(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Get the list of <c>StructureDefinition.context</c> property values from the specified artifact summary property bag, if available.</summary>
            <remarks>Only applies to summaries of <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> resources.</remarks>
            <returns>A read-only list of tuples containing the type and expression of each supported extension context.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.StructureDefinitionSummaryProperties.GetStructureDefinitionType(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Get the <c>StructureDefinition.type</c> property value from the specified artifact summary property bag, if available.</summary>
            <remarks>Only applies to summaries of <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> resources.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.StructureDefinitionSummaryProperties.GetStructureDefinitionBaseDefinition(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Get the <c>StructureDefinition.baseDefinition</c> property value from the specified artifact summary property bag, if available.</summary>
            <remarks>Only applies to summaries of <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> resources.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.StructureDefinitionSummaryProperties.GetStructureDefinitionDerivation(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Get the <c>StructureDefinition.derivation</c> property value from the specified artifact summary property bag, if available.</summary>
            <remarks>Only applies to summaries of <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> resources.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.StructureDefinitionSummaryProperties.GetStructureDefinitionMaturityLevel(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Get the value of the maturity level extension from the specified artifact summary property bag, if available.</summary>
            <remarks>
            Returns the resource maturity level, as defined by the official FHIR extension "http://hl7.org/fhir/StructureDefinition/structuredefinition-fmm".
            Only applies to summaries of <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> resources that define FHIR core resources.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.StructureDefinitionSummaryProperties.GetStructureDefinitionWorkingGroup(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Get the value of the working group extension from the specified artifact summary property bag, if available.</summary>
            <remarks>
            Returns the associated working group, as defined by the official FHIR extension "http://hl7.org/fhir/StructureDefinition/structuredefinition-wg".
            Only applies to summaries of <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> resources that define FHIR core resources.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.StructureDefinitionSummaryProperties.GetStructureDefinitionStandardsStatus(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Get the value of the standards status extension from the specified artifact summary property bag, if available.</summary>
            <remarks>
            Returns the associated standards status level, as defined by the official FHIR extension "http://hl7.org/fhir/StructureDefinition/structuredefinition-standards-status".
            Only applies to summaries of <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> resources that define FHIR core resources.
            </remarks>
            <returns>draft | normative | trial-use | informative | deprecated | external</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.StructureDefinitionSummaryProperties.GetStructureDefinitionNormativeVersion(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Get the value of the normative version extension from the specified artifact summary property bag, if available.</summary>
            <remarks>
            Returns the associated normative version number, as defined by the official FHIR extension "http://hl7.org/fhir/StructureDefinition/structuredefinition-normative-version".
            Only applies to summaries of <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> resources that define FHIR core resources.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.StructureDefinitionSummaryProperties.GetStructureDefinitionRootDefinition(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Get the value of the root element definition from the specified artifact summary property bag, if available.</summary>
            <remarks>
            Returns the definition text of the root element.
            Only applies to summaries of <see cref="T:Hl7.Fhir.Model.StructureDefinition"/> resources.
            </remarks>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.CodeSystemSummaryProperties">
            <summary>For harvesting specific summary information from a <see cref="T:Hl7.Fhir.Model.CodeSystem"/> resource.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CodeSystemSummaryProperties.IsCodeSystemSummary(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Determines if the specified instance represents summary information about a <see cref="T:Hl7.Fhir.Model.CodeSystem"/> resource.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CodeSystemSummaryProperties.Harvest(Hl7.Fhir.ElementModel.ISourceNode,Hl7.Fhir.Specification.Summary.ArtifactSummaryPropertyBag)">
            <summary>Harvest specific summary information from a <see cref="T:Hl7.Fhir.Model.CodeSystem"/> resource.</summary>
            <returns><c>true</c> if the current target represents a <see cref="T:Hl7.Fhir.Model.CodeSystem"/> resource, or <c>false</c> otherwise.</returns>
            <remarks>The <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator"/> calls this method from a <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryHarvester"/> delegate.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.CodeSystemSummaryProperties.GetCodeSystemValueSet(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Get the <c>CodeSystem.valueSet</c> property value from the specified artifact summary property bag, if available.</summary>
            <remarks>Only applies to summaries of <see cref="T:Hl7.Fhir.Model.CodeSystem"/> resources.</remarks>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.ConceptMapSummaryProperties">
            <summary>For harvesting specific summary information from a <see cref="T:Hl7.Fhir.Model.ConceptMap"/> resource.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ConceptMapSummaryProperties.IsConceptMapSummary(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Determines if the specified instance represents summary information about a <see cref="T:Hl7.Fhir.Model.ConceptMap"/> resource.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ConceptMapSummaryProperties.Harvest(Hl7.Fhir.ElementModel.ISourceNode,Hl7.Fhir.Specification.Summary.ArtifactSummaryPropertyBag)">
            <summary>Harvest specific summary information from a <see cref="T:Hl7.Fhir.Model.ConceptMap"/> resource.</summary>
            <returns><c>true</c> if the current target represents a <see cref="T:Hl7.Fhir.Model.ConceptMap"/> resource, or <c>false</c> otherwise.</returns>
            <remarks>The <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator"/> calls this method from a <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryHarvester"/> delegate.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ConceptMapSummaryProperties.GetConceptMapSource(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Get the <c>ConceptMap.source[x]</c> property value from the specified artifact summary property bag, if available.</summary>
            <remarks>Only applies to summaries of <see cref="T:Hl7.Fhir.Model.ConceptMap"/> resources.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ConceptMapSummaryProperties.GetConceptMapTarget(Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag)">
            <summary>Get the <c>ConceptMap.target[x]</c> property value from the specified artifact summary property bag, if available.</summary>
            <remarks>Only applies to summaries of <see cref="T:Hl7.Fhir.Model.ConceptMap"/> resources.</remarks>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.WebResolver">
            <summary>Fetches FHIR artifacts (Profiles, ValueSets, ...) from a FHIR server.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Source.WebResolver.DefaultTimeOut">
            <summary>Default request timeout in milliseconds.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.WebResolver.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.WebResolver.#ctor(System.Func{System.Uri,Hl7.Fhir.Rest.FhirClient})">
            <summary>Create a new <see cref="T:Hl7.Fhir.Specification.Source.WebResolver"/> instance that supports a custom <see cref="T:Hl7.Fhir.Rest.FhirClient"/> implementation.</summary>
            <param name="fhirClientFactory">
            Factory function that should create a new <see cref="T:Hl7.Fhir.Rest.FhirClient"/> instance for the specified <see cref="T:System.Uri"/>.
            If this parameter equals <c>null</c>, then the new instance creates a default <see cref="T:Hl7.Fhir.Rest.FhirClient"/> instance.
            </param>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.WebResolver.ParserSettings">
            <summary>Gets or sets configuration settings that control parsing behavior.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.WebResolver.TimeOut">
            <summary>Gets or sets the request timeout of the internal <see cref="T:Hl7.Fhir.Rest.FhirClient"/> instance.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.WebResolver.LastError">
            <summary>
            Gets the runtime <see cref="T:System.Exception"/> from the last call to the
            <see cref="M:Hl7.Fhir.Specification.Source.WebResolver.ResolveByUri(System.String)"/> method, if any, or <c>null</c> otherwise.
            </summary>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.ZipCacher">
            <summary>
            Internal class which gives access to files within a zip whilst avoiding unpacking that zip on every access.
            The ZipCacher will unpack the zip once and store the contents in a cache directory, serving files from this cache.
            When the ZipCacher detects the zip is more recent than its cache, it will update the cache directory automatically.
            
            The ZipCacher will either use a different cache for each instance, or -given a persistent "cache key"- reuse the
            cache from a previous instantiation of ZipCacher. When using a shared cache over multiple ZipCachers with the/
            same cacheKey, keep in mind that it uses the filesystem for its state, and is not thread-safe.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ZipCacher.GetContents">
            <summary>
            Returns a list of files present in the zip, returning a full path to the file
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ZipCacher.IsActual">
            <summary>
            Returns true if the ZipCacher has an up-to-date cache for the zip file it manages
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ZipCacher.getCachedZipDirectory">
            <summary>
            Gets the cache directory, but does not create one if it does not yet exist
            </summary>
            <returns></returns>
        </member>
        <member name="T:Hl7.Fhir.Specification.Source.ZipSource">
            <summary>Reads FHIR artifacts (Profiles, ValueSets, ...) from a ZIP archive. Thread-safe.</summary>
            <remarks>Extracts the ZIP archive to a temporary folder and delegates to the <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/>.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ZipSource.CreateValidationSource">
            <summary>Create a new <see cref="T:Hl7.Fhir.Specification.Source.ZipSource"/> instance to read FHIR artifacts from the core specification archive "specification.zip".</summary>
            <returns>A new <see cref="T:Hl7.Fhir.Specification.Source.ZipSource"/> instance.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ZipSource.#ctor(System.String)">
            <summary>Create a new <see cref="T:Hl7.Fhir.Specification.Source.ZipSource"/> instance for the ZIP archive with the specified file path.</summary>
            <param name="zipPath">File path to a ZIP archive.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ZipSource.#ctor(System.String,Hl7.Fhir.Specification.Source.DirectorySourceSettings)">
            <summary>Create a new <see cref="T:Hl7.Fhir.Specification.Source.ZipSource"/> instance for the ZIP archive with the specified file path.</summary>
            <param name="zipPath">File path to a ZIP archive.</param>
            <param name="settings">Configuration settings for the internal <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/> instance.</param>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.ZipSource.ZipPath">
            <summary>Gets the location of the ZIP archive, as specified in the constructor.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.ZipSource.IsPrepared">
            <summary>Determines if the <see cref="T:Hl7.Fhir.Specification.Source.ZipSource"/> has already extracted the contents of the specified ZIP archive.</summary>
            <remarks>The <see cref="T:Hl7.Fhir.Specification.Source.ZipSource"/> extracts the contents of the ZIP archive on demand.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.ZipSource.ExtractPath">
            <summary>Gets the location of the ZIP archive extraction folder (if prepared), or <c>null</c> otherwise.</summary>
            <remarks>
            The <see cref="T:Hl7.Fhir.Specification.Source.ZipSource"/> extracts the contents of the ZIP archive on demand.
            If <see cref="P:Hl7.Fhir.Specification.Source.ZipSource.IsPrepared"/> equals <c>false</c>, then the extraction folder is not yet known
            and <see cref="P:Hl7.Fhir.Specification.Source.ZipSource.ExtractPath"/> returns <c>null</c>.
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.ZipSource.Mask">
            <summary>
            Gets or sets the search string to match against the names of files in the ZIP archive.
            The source will only provide resources from files that match the specified mask.
            The source will ignore all files that don't match the specified mask.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.ZipSource.Source">
            <summary>Returns a reference to the internal <see cref="T:Hl7.Fhir.Specification.Source.IConformanceSource"/> that exposes the contents of the ZIP archive.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Source.ZipSource.FileSource">
            <summary>Returns a reference to the internal <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/> that exposes the contents of the ZIP archive.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ZipSource.Prepare">
            <summary>Extract the contents of the specified ZIP archive.</summary>
            <remarks>The <see cref="T:Hl7.Fhir.Specification.Source.ZipSource"/> automatically unpacks the ZIP archive on demand.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ZipSource.ListArtifactNames">
            <summary>Gets a list of artifact filenames.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ZipSource.LoadArtifactByName(System.String)">
            <summary>Load the artifact with the specified filename.</summary>
            <param name="name">The filename of the artifact.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ZipSource.ListResourceUris(System.Nullable{Hl7.Fhir.Model.ResourceType})">
            <summary>List all resource uris, optionally filtered by type.</summary>
            <param name="filter">A <see cref="T:Hl7.Fhir.Model.ResourceType"/> enum value.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequence of uri strings.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ZipSource.FindCodeSystemByValueSet(System.String)">
            <summary>
            Find a <see cref="T:Hl7.Fhir.Model.CodeSystem"/> resource by a <see cref="T:Hl7.Fhir.Model.ValueSet"/> canonical url that contains all codes from that codesystem.
            </summary>
            <param name="valueSetUri">The canonical uri of a <see cref="T:Hl7.Fhir.Model.ValueSet"/> resource.</param>
            <returns>A <see cref="T:Hl7.Fhir.Model.CodeSystem"/> resource, or <c>null</c>.</returns>
            <remarks>
            It is very common for valuesets to represent all codes from a specific/smaller code system.
            These are indicated by he CodeSystem.valueSet element, which is searched here.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ZipSource.FindConceptMaps(System.String,System.String)">
            <summary>Find <see cref="T:Hl7.Fhir.Model.ConceptMap"/> resources which map from the given source to the given target.</summary>
            <param name="sourceUri">An uri that is either the source uri, source ValueSet system or source StructureDefinition canonical url for the map.</param>
            <param name="targetUri">An uri that is either the target uri, target ValueSet system or target StructureDefinition canonical url for the map.</param>
            <returns>A sequence of <see cref="T:Hl7.Fhir.Model.ConceptMap"/> resources.</returns>
            <remarks>Either sourceUri may be null, or targetUri, but not both</remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ZipSource.FindNamingSystem(System.String)">
            <summary>Finds a <see cref="T:Hl7.Fhir.Model.NamingSystem"/> resource by matching any of a system's UniqueIds.</summary>
            <param name="uniqueId">The unique id of a <see cref="T:Hl7.Fhir.Model.NamingSystem"/> resource.</param>
            <returns>A <see cref="T:Hl7.Fhir.Model.NamingSystem"/> resource, or <c>null</c>.</returns>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ZipSource.ListSummaries">
            <summary>Returns a list of <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances with key information about each FHIR artifact provided by the source.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ZipSource.LoadBySummary(Hl7.Fhir.Specification.Source.ArtifactSummary)">
            <summary>
            Load the resource from which the specified summary was generated.
            <para>
            The internal <see cref="T:Hl7.Fhir.Specification.Source.DirectorySource"/> instance annotates returned resource instances
            with an <seealso cref="T:Hl7.Fhir.Specification.Source.OriginAnnotation"/> that captures the value of the
            <see cref="P:Hl7.Fhir.Specification.Source.ArtifactSummary.Origin"/> property.
            The <seealso cref="M:Hl7.Fhir.Specification.Source.OriginAnnotationExtensions.GetOrigin(Hl7.Fhir.Model.Resource)"/> extension method 
            provides access to the annotated location.
            </para>
            </summary>
            <param name="summary">An <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instance generated by this source.</param>
            <returns>A new <see cref="T:Hl7.Fhir.Model.Resource"/> instance, or <c>null</c>.</returns>
            <remarks>
            The <see cref="P:Hl7.Fhir.Specification.Source.ArtifactSummary.Origin"/> and <see cref="P:Hl7.Fhir.Specification.Source.ArtifactSummary.Position"/>
            summary properties allow the source to identify and resolve the artifact.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ZipSource.ResolveByUri(System.String)">
            <summary>Find a resource based on its relative or absolute uri.</summary>
            <param name="uri">A resource uri.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ZipSource.ResolveByCanonicalUri(System.String)">
            <summary>Find a (conformance) resource based on its canonical uri.</summary>
            <param name="uri">The canonical url of a (conformance) resource.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Source.ZipSource.createSource">
            <summary>
            Unpacks the zip-file and constructs a new FileArtifactSource on the unzipped directory
            </summary>
            <remarks>This is an expensive operations and should be run once. As well, it unpacks files on the
            file system and is not thread-safe.</remarks>
        </member>
        <member name="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryHarvester">
            <summary>Represents a method that tries to harvest specific summary information from an artifact.</summary>
            <param name="nav">An <see cref="T:Hl7.Fhir.ElementModel.ISourceNode"/> instance to navigate the artifact.</param>
            <param name="properties">A dictionary for storing the harvested summary information.</param>
            <returns>
            Returns <c>true </c> to indicate that all relevant properties have been harvested from the artifact and the summary is ready to be generated.
            Returns <c>false</c> to try and continue harvesting additional summary information.
            </returns>
            <remarks>
            The specified <see cref="T:Hl7.Fhir.ElementModel.ISourceNode"/> is positioned on the first child element level (e.g. <c>StructureDefinition.url</c>).
            The target method can fetch summary information starting from the current position in a forward direction.
            When finished, the navigator should again be positioned on the first nesting level, so any remaining
            delegates can continue harvesting additional information from there.
            </remarks>
        </member>
        <member name="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator">
            <summary>
            For generating artifact summary information from a file path or <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/>,
            independent of the underlying resource serialization format.
            </summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator.ConformanceHarvesters">
            <summary>
            A list of default <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryHarvester"/> delegates that the
            <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator"/> uses to harvest specific summary
            information from different types of conformance resources.
            <para>
            Each harvester extracts summary information from a specific type of resource(s).
            The generator executes the harvesters in the specified order,
            until one of the harvester delegates returns <c>true</c>.
            The generator then skips any remaining harvesters and continues
            processing the next resource.
            </para>
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator.Default">
            <summary>Singleton. Returns a global default instance.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator.#ctor">
            <summary>Default constructor. Creates a new instance of the <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator"/>.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator.#ctor(System.Boolean)">
            <summary>Constructor. Creates a new instance of the <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator"/>.</summary>
            <param name="excludeSummariesForUnknownArtifacts">
            If <c>true</c>, then the generator will ignore non-parseable (invalid or non-FHIR)
            content files and exclude the summary from the result.
            </param>
        </member>
        <member name="P:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator.ExcludeSummariesForUnknownArtifacts">
            <summary>
            Determines wether the <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator"/> should exclude
            artifact summaries for non-parseable (invalid or non-FHIR) content files.
            <para>
            By default (<c>false</c>), the generator will harvest summaries from all files
            that exist in the specified content directory and match the specified mask,
            including files that cannot be parsed (e.g. invalid or non-FHIR content).
            </para>
            <para>
            If <c>true</c>, then the generator will only harvest summaries from valid
            FHIR artifacts that exist in the specified content directory and match the
            specified mask. Unparseable files are ignored and excluded from the result.
            </para>
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator.Generate(System.String)">
            <summary>
            Generate a list of artifact summary information for a resource file on disk,
            using the default <see cref="F:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator.ConformanceHarvesters"/>.
            <para>
            If the target resource represents a <see cref="T:Hl7.Fhir.Model.Bundle"/> instance, then the generator
            returns a list of summaries for all resource entries contained in the bundle.
            </para>
            </summary>
            <param name="filePath">The file path of the target artifact (or the containing Bundle).</param>
            <returns>A list of new <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances.</returns>
            <remarks>
            The generator catches all runtime exceptions that occur during harvesting and returns
            them as <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances with <see cref="P:Hl7.Fhir.Specification.Source.ArtifactSummary.IsFaulted"/>
            equal to <c>true</c> and <see cref="P:Hl7.Fhir.Specification.Source.ArtifactSummary.Error"/> returning the exception.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator.Generate(System.String,Hl7.Fhir.Specification.Summary.ArtifactSummaryHarvester[])">
            <summary>
            Generate a list of artifact summary information for a resource file on disk,
            using the specified list of <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryHarvester"/> instances.
            <para>
            If the target resource represents a <see cref="T:Hl7.Fhir.Model.Bundle"/> instance, then the generator
            returns a list of summaries for all resource entries contained in the bundle.
            </para>
            </summary>
            <param name="filePath">The file path of the target artifact (or the containing Bundle).</param>
            <param name="harvesters">
            A list of <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryHarvester"/> delegates that the
            generator calls to harvest summary information from each artifact.
            If the harvester list equals <c>null</c> or empty, then the generator will
            harvest only the common default summary properties.
            </param>
            <returns>A list of new <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances.</returns>
            <remarks>
            The generator catches all runtime exceptions that occur during harvesting and returns
            them as <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances with <see cref="P:Hl7.Fhir.Specification.Source.ArtifactSummary.IsFaulted"/>
            equal to <c>true</c> and <see cref="P:Hl7.Fhir.Specification.Source.ArtifactSummary.Error"/> returning the exception.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator.Generate(System.String,Hl7.Fhir.Serialization.NavigatorStreamFactory,Hl7.Fhir.Specification.Summary.ArtifactSummaryHarvester[])">
            <summary>
            Generate a list of artifact summary information for a resource file on disk,
            using the specified list of <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryHarvester"/> instances.
            <para>
            If the target resource represents a <see cref="T:Hl7.Fhir.Model.Bundle"/> instance, then the generator
            returns a list of summaries for all resource entries contained in the bundle.
            </para>
            </summary>
            <param name="filePath">The file path of the target artifact (or the containing Bundle).</param>
            <param name="navigatorStreamFactory">Function to create an <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/> instance for the specified file path.</param>
            <param name="harvesters">
            A list of <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryHarvester"/> delegates that the
            generator calls to harvest summary information from each artifact.
            If the harvester list equals <c>null</c> or empty, then the generator will
            harvest only the common default summary properties.
            </param>
            <returns>A list of new <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances.</returns>
            <remarks>
            The generator catches all runtime exceptions that occur during harvesting and returns
            them as <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances with <see cref="P:Hl7.Fhir.Specification.Source.ArtifactSummary.IsFaulted"/>
            equal to <c>true</c> and <see cref="P:Hl7.Fhir.Specification.Source.ArtifactSummary.Error"/> returning the exception.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator.Generate(Hl7.Fhir.Serialization.INavigatorStream)">
            <summary>
            Generate a list of artifact summary information from a resource input stream,
            using the default <see cref="F:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator.ConformanceHarvesters"/>.
            <para>
            If the target resource represents a <see cref="T:Hl7.Fhir.Model.Bundle"/> instance, then the generator
            returns a list of summaries for all resource entries contained in the bundle.
            </para>
            </summary>
            <param name="navStream">An <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/> instance.</param>
            <returns>A list of new <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances.</returns>
            <remarks>
            The generator catches all runtime exceptions that occur during harvesting and returns
            them as <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances with <see cref="P:Hl7.Fhir.Specification.Source.ArtifactSummary.IsFaulted"/>
            equal to <c>true</c> and <see cref="P:Hl7.Fhir.Specification.Source.ArtifactSummary.Error"/> returning the exception.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator.Generate(Hl7.Fhir.Serialization.INavigatorStream,System.Action{Hl7.Fhir.Specification.Summary.ArtifactSummaryPropertyBag})">
            <summary>
            Generate a list of artifact summary information from a resource input stream,
            using the default <see cref="F:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator.ConformanceHarvesters"/>.
            <para>
            If the target resource represents a <see cref="T:Hl7.Fhir.Model.Bundle"/> instance, then the generator
            returns a list of summaries for all resource entries contained in the bundle.
            </para>
            </summary>
            <param name="navStream">An <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/> instance.</param>
            <param name="customPropertyInitializer">
            An optional summary properties initialization method, or <c>null</c>.
            If specified, the generator will call this method for each generated summary,
            allowing the caller to modify or enrich the set of generated summary properties.
            </param>
            <returns>A list of new <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances.</returns>
            <remarks>
            The generator catches all runtime exceptions that occur during harvesting and returns
            them as <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances with <see cref="P:Hl7.Fhir.Specification.Source.ArtifactSummary.IsFaulted"/>
            equal to <c>true</c> and <see cref="P:Hl7.Fhir.Specification.Source.ArtifactSummary.Error"/> returning the exception.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator.Generate(Hl7.Fhir.Serialization.INavigatorStream,System.Action{Hl7.Fhir.Specification.Summary.ArtifactSummaryPropertyBag},Hl7.Fhir.Specification.Summary.ArtifactSummaryHarvester[])">
            <summary>
            Generate a list of artifact summary information from a resource input stream,
            using the specified list of <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryHarvester"/> instances.
            <para>
            If the target resource represents a <see cref="T:Hl7.Fhir.Model.Bundle"/> instance, then the generator
            returns a list of summaries for all resource entries contained in the bundle.
            </para>
            </summary>
            <param name="navStream">An <see cref="T:Hl7.Fhir.Serialization.INavigatorStream"/> instance.</param>
            <param name="customPropertyInitializer">
            An optional summary properties initialization method, or <c>null</c>.
            If specified, the generator will call this method for each generated summary,
            allowing the caller to modify or enrich the set of generated summary properties.
            </param>
            <param name="harvesters">
            A list of <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryHarvester"/> delegates that the
            generator calls to harvest summary information from each artifact.
            If the harvester list equals <c>null</c> or empty, then the generator will
            harvest only the common default summary properties.
            </param>
            <returns>A list of new <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances.</returns>
            <remarks>
            The generator catches all runtime exceptions that occur during harvesting and returns
            them as <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instances with <see cref="P:Hl7.Fhir.Specification.Source.ArtifactSummary.IsFaulted"/>
            equal to <c>true</c> and <see cref="P:Hl7.Fhir.Specification.Source.ArtifactSummary.Error"/> returning the exception.
            </remarks>
        </member>
        <member name="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryNavigationExtensions">
            <summary>
            Extension methods on <see cref="T:Hl7.Fhir.ElementModel.ISourceNode"/> to facilitate harvesting summary information
            from a FHIR artifact in a forward direction and storing the harvested values in a property bag.
            </summary>
            <remarks>
            The extension methods with element name parameters try to harvest a value from the a matching element
            (or from an also matching child element).
            If the current element does not match, the methods advance the navigator to the first matching
            sibling element in forward direction, if it exists. The boolean return value indicates if a
            matching element was found.
            After returning, the navigator is positioned on the original element or on a following sibling.
            </remarks>
        </member>
        <member name="M:Hl7.Fhir.Specification.Summary.ArtifactSummaryNavigationExtensions.HarvestValue(Hl7.Fhir.ElementModel.ISourceNode,System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>Harvest the value of the current element into a property bag.</summary>
            <param name="nav">An <see cref="T:Hl7.Fhir.ElementModel.ISourceNode"/> instance.</param>
            <param name="properties">A property bag to store harvested summary information.</param>
            <param name="key">A property key.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Summary.ArtifactSummaryNavigationExtensions.HarvestValue(Hl7.Fhir.ElementModel.ISourceNode,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String)">
            <summary>Harvest the value of the (current or sibling) element with the specified name into a property bag.</summary>
            <param name="nav">An <see cref="T:Hl7.Fhir.ElementModel.ISourceNode"/> instance.</param>
            <param name="properties">A property bag to store harvested summary information.</param>
            <param name="key">A property key.</param>
            <param name="element">An element name.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Summary.ArtifactSummaryNavigationExtensions.HarvestValue(Hl7.Fhir.ElementModel.ISourceNode,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.String)">
            <summary>Harvest the value of a child element into a property bag.</summary>
            <param name="nav">An <see cref="T:Hl7.Fhir.ElementModel.ISourceNode"/> instance.</param>
            <param name="properties">A property bag to store harvested summary information.</param>
            <param name="key">A property key.</param>
            <param name="element">An element name.</param>
            <param name="childElement">A child element name.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Summary.ArtifactSummaryNavigationExtensions.HarvestValue(Hl7.Fhir.ElementModel.ISourceNode,System.Collections.Generic.IList{System.String})">
            <summary>Add the value of the current element to a list, if not missing or empty.</summary>
            <param name="nav">An <see cref="T:Hl7.Fhir.ElementModel.ISourceNode"/> instance.</param>
            <param name="values">A list of values.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Summary.ArtifactSummaryNavigationExtensions.HarvestValues(Hl7.Fhir.ElementModel.ISourceNode,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String)">
            <summary>Harvest an array of element values into a property bag.</summary>
            <param name="nav">An <see cref="T:Hl7.Fhir.ElementModel.ISourceNode"/> instance.</param>
            <param name="properties">A property bag to store harvested summary information.</param>
            <param name="key">A property key.</param>
            <param name="element">An element name.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Summary.ArtifactSummaryNavigationExtensions.HarvestValues(Hl7.Fhir.ElementModel.ISourceNode,System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.String,System.String)">
            <summary>Harvest an array of child element values into a property bag.</summary>
            <param name="nav">An <see cref="T:Hl7.Fhir.ElementModel.ISourceNode"/> instance.</param>
            <param name="properties">A property bag to store harvested summary information.</param>
            <param name="key">A property key.</param>
            <param name="element">An element name.</param>
            <param name="childElement">A child element name.</param>
        </member>
        <member name="M:Hl7.Fhir.Specification.Summary.ArtifactSummaryNavigationExtensions.HarvestExtensions(Hl7.Fhir.ElementModel.ISourceNode,System.Collections.Generic.IDictionary{System.String,System.Object},System.Action{Hl7.Fhir.ElementModel.ISourceNode,System.Collections.Generic.IDictionary{System.String,System.Object},System.String})">
            <summary>Harvest extension values into a property bag.</summary>
            <param name="nav">An <see cref="T:Hl7.Fhir.ElementModel.ISourceNode"/> instance.</param>
            <param name="properties">A property bag to store harvested summary information.</param>
            <param name="extensionValueHarvester">Callback function called for each individual extension entry.</param>
        </member>
        <member name="T:Hl7.Fhir.Specification.Summary.IArtifactSummaryPropertyBag">
            <summary>Read-only dictionary interface to access harvested artifact summary properties by key.</summary>
            <remarks>
            A common interface for both harvester implementation logic and client logic.
            Implemented by both <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryPropertyBag"/> and <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/>.
            This allows <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryHarvester"/> implementations to define common property
            accessor extension methods that operate on both types, and are available during processing to
            other harvesters (providing access to information contained in the property bag that has already
            been harvested by preceding delegates) as well as after processing to consumers (providing access
            to the final and completed summary).
            </remarks>
        </member>
        <member name="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryPropertyBag">
            <summary>A property bag for storing and retrieving harvested artifact summary information by key.</summary>
            <remarks>
            The <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryGenerator"/> creates a new <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryPropertyBag"/>
            instance for each artifact and calls the <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryHarvester"/> delegates to
            harvest summary information into the property bag. Finally, the generator creates a new
            <see cref="T:Hl7.Fhir.Specification.Source.ArtifactSummary"/> instance from the initialized property bag.
            </remarks>
        </member>
        <member name="P:Hl7.Fhir.Specification.Summary.ArtifactSummaryPropertyBag.Empty">
            <summary>Returns an empty <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryPropertyBag"/> instance.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Summary.ArtifactSummaryPropertyBag.DefaultCapacity">
            <summary>Default initial capacity.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Summary.ArtifactSummaryPropertyBag.#ctor">
            <summary>Creates a new instance of the <see cref="T:Hl7.Fhir.Specification.Summary.ArtifactSummaryPropertyBag"/>.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.ITerminologyService.ValidateCode(System.String,System.String,Hl7.Fhir.Model.ValueSet,System.String,System.String,System.String,System.String,Hl7.Fhir.Model.Coding,Hl7.Fhir.Model.CodeableConcept,Hl7.Fhir.Model.FhirDateTime,System.Nullable{System.Boolean},System.String)">
            <summary>
            Will check whether the a code is a member of the given valueset.
            </summary>
            <param name="canonical">Canonical url of the ValueSet (ValueSet.url)</param>
            <param name="context">The context of the value set, so that the service can resolve this to a value set to validate against.</param>
            <param name="valueSet">Allows the caller to send the valueset directly, instead of by providing the canonical or context.</param>
            <param name="code">The code to be validated</param>
            <param name="system">System for the code.</param>
            <param name="version">The version of the system to be used</param>
            <param name="display">If given, will check whether the given display is valid for the code</param>
            <param name="coding">The coding to validate (instead of code/system/version)</param>
            <param name="codeableConcept">A full codeable concept ro validate</param>
            <param name="date">The date for which the validation should be checked</param>
            <param name="abstract">If true, then an abstract code is allowed to be used in the context of the code that is being validated.</param>
            <param name="displayLanguage">Language to be used for description when validating the display property</param>
            <returns>An OperationOutcome with the result of the validation</returns>
            <remarks>See http://hl7.org/valueset-operations.html#validate-code for more information</remarks>
        </member>
        <member name="T:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings">
            <summary>Configuration settings for the <see cref="T:Hl7.Fhir.Specification.Terminology.ValueSetExpander"/> class.</summary>
        </member>
        <member name="F:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings.DefaultMaxExpansionSize">
            <summary>Default value of the <see cref="P:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings.MaxExpansionSize"/> property.</summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings.ValueSetSource">
            <summary>
            The <see cref="T:Hl7.Fhir.Specification.Source.IResourceResolver"/> to use when a reference to another valueset is encountered />
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings.MaxExpansionSize">
            <summary>
            The maximum number of concepts to include in an expansion before the expander raises an error.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings.#ctor">
            <summary>Default constructor. Creates a new <see cref="T:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings"/> instance with default property values.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings.#ctor(Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings)">
            <summary>Clone constructor. Generates a new <see cref="T:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings"/> instance initialized from the state of the specified instance.</summary>
            <exception cref="T:System.ArgumentNullException">The specified argument is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings.CopyTo(Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings)">
            <summary>Copy all configuration settings to another instance.</summary>
            <param name="other">Another <see cref="T:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">The specified argument is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings.Clone">
            <summary>Creates a new <see cref="T:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings"/> object that is a copy of the current instance.</summary>
        </member>
        <member name="M:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings.CreateDefault">
            <summary>Creates a new <see cref="T:Hl7.Fhir.Specification.Terminology.ValueSetExpanderSettings"/> instance with default property values.</summary>
        </member>
        <member name="M:Hl7.Fhir.Support.Issue.Create(System.Int32,Hl7.Fhir.Model.OperationOutcome.IssueSeverity,Hl7.Fhir.Model.OperationOutcome.IssueType)">
            <summary>Factory method.</summary>
        </member>
        <member name="T:Hl7.Fhir.Support.ResolvingConflictException">
            <summary>
            The exception that is thrown to report a resource resolving conflict.
            <para>
            Indicates that the source was unable to resolve a single target resource,
            because it found multiple existing resources matching the specified identifier.
            </para>
            </summary>
            <remarks>Generic replacement for the obsolete <seealso cref="T:Hl7.Fhir.Support.CanonicalUrlConflictException"/>.</remarks>
        </member>
        <member name="M:Hl7.Fhir.Support.ResolvingConflictException.ResourceUriConflict(System.Collections.Generic.IEnumerable{Hl7.Fhir.Support.ResolvingConflictException.ResolvingConflict})">
            <summary>Generate a new <see cref="T:Hl7.Fhir.Support.ResolvingConflictException"/> to report multiple conflicting resources with the same Resource Uri identifier.</summary>
        </member>
        <member name="M:Hl7.Fhir.Support.ResolvingConflictException.CanonicalUrlConflict(System.Collections.Generic.IEnumerable{Hl7.Fhir.Support.ResolvingConflictException.ResolvingConflict})">
            <summary>Generate a new <see cref="T:Hl7.Fhir.Support.ResolvingConflictException"/> to report multiple conflicting naming system resources with the same unique identifier.</summary>
        </member>
        <member name="M:Hl7.Fhir.Support.ResolvingConflictException.NamingSystemUniqueIdConflict(System.Collections.Generic.IEnumerable{Hl7.Fhir.Support.ResolvingConflictException.ResolvingConflict})">
            <summary>Generate a new <see cref="T:Hl7.Fhir.Support.ResolvingConflictException"/> to report multiple conflicting NamingSystem resources with the same unique identifier.</summary>
        </member>
        <member name="M:Hl7.Fhir.Support.ResolvingConflictException.CodeSystemConflict(System.Collections.Generic.IEnumerable{Hl7.Fhir.Support.ResolvingConflictException.ResolvingConflict})">
            <summary>Generate a new <see cref="T:Hl7.Fhir.Support.ResolvingConflictException"/> to report multiple conflicting CodeSystem resources with the same ValueSet url.</summary>
        </member>
        <member name="M:Hl7.Fhir.Support.ResolvingConflictException.ConceptMapUrlConflict(System.Collections.Generic.IEnumerable{Hl7.Fhir.Support.ResolvingConflictException.ResolvingConflict})">
            <summary>Generate a new <see cref="T:Hl7.Fhir.Support.ResolvingConflictException"/> to report multiple conflicting ConceptMap resources with the same source or target url.</summary>
        </member>
        <member name="T:Hl7.Fhir.Support.ResolvingConflictException.ResolvingConflict">
            <summary>
            Provides information about a specific resolving conflict,
            as reported by the <see cref="T:Hl7.Fhir.Support.ResolvingConflictException"/>.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Support.ResolvingConflictException.ResolvingConflict.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>Create a new <see cref="T:Hl7.Fhir.Support.ResolvingConflictException.ResolvingConflict"/> instance.</summary>
            <param name="identifier">An identifier that matches multiple conflicting resources.</param>
            <param name="origins">The original locations (e.g. file paths) of the conflicting resources that match the specified <paramref name="identifier"/> value.</param>
        </member>
        <member name="P:Hl7.Fhir.Support.ResolvingConflictException.ResolvingConflict.Identifier">
            <summary>The identifier value matched by multiple conflicting resources.</summary>
        </member>
        <member name="P:Hl7.Fhir.Support.ResolvingConflictException.ResolvingConflict.Origins">
            <summary>The original locations (e.g. file paths) of conflicting resources that match the specified <see cref="P:Hl7.Fhir.Support.ResolvingConflictException.ResolvingConflict.Identifier"/> value.</summary>
        </member>
        <member name="M:Hl7.Fhir.Support.ResolvingConflictException.#ctor(System.String,System.Collections.Generic.IEnumerable{Hl7.Fhir.Support.ResolvingConflictException.ResolvingConflict})">
            <summary>
            Create a new generic <see cref="T:Hl7.Fhir.Support.ResolvingConflictException"/> instance.
            <para>
            The <see cref="T:Hl7.Fhir.Support.ResolvingConflictException"/> class also provides static
            factory methods to create exceptions for specific types of conflicts.
            </para>
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Support.ResolvingConflictException.Conflicts">
            <summary>Returns a list of resolving conflicts.</summary>
        </member>
        <member name="T:Hl7.Fhir.Support.ResourceReferenceNotFoundException">
            <summary>
            The exception that is throw when an attempt to resolve an external resource reference fails.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Support.ResourceReferenceNotFoundException.Url">
            <summary>Returns the url of the unresolved resource reference.</summary>
        </member>
        <member name="T:Hl7.Fhir.Validation.PocoValidationExtensions">
            <summary>
            Add support for validating against Base subclasses (instead of ITypedElement) to the Validator
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Validation.ProfileAssertion.Resolve">
            <summary>
            Resolves the StructureDefinitions referred to by the given canonicals, and adds them
            to the list of StructureDefinitions available to the preprocessor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Validation.ProfileAssertion.Validate">
            <summary>
            Validates the instance type, declared and stated profiles for consistenty.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Validation.ProfilePreprocessor.GenerateSnapshots(System.Collections.Generic.IEnumerable{Hl7.Fhir.Model.StructureDefinition},System.Func{Hl7.Fhir.Model.StructureDefinition,Hl7.Fhir.Model.OperationOutcome},System.String)">
            <summary>
            Generate snapshots for all StructureDefinitions available to the preprocessor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Validation.ProfilePreprocessor.CreateNavigators(System.Collections.Generic.IEnumerable{Hl7.Fhir.Model.StructureDefinition})">
            <summary>
            Generate navigators for all StructureDefinitions with snapshots available to the preprocessor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hl7.Fhir.Validation.ConstraintsBucket.#ctor(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator,Hl7.Fhir.Validation.Validator)">
            <summary>
            Represents a "bucket" that triages instances based on whether they match a slice-specific set of constraints. This is used
            for "discriminator-less" validation.
            </summary>
            <param name="sliceConstraints">The set of constraints that are the criterium for membership of the slice.</param>
            <param name="validator">A validator instance that will be invoked to validate the child constraints.</param>
        </member>
        <member name="M:Hl7.Fhir.Validation.DiscriminatorBucket.#ctor(Hl7.Fhir.Specification.Navigation.ElementDefinitionNavigator,Hl7.Fhir.Validation.Validator,Hl7.Fhir.Validation.IDiscriminator[])">
            <summary>
            Represents a "bucket" that triages instances based on a discriminator and validates matching instances against a
            slice-specific set of constraints.
            </summary>
            <param name="sliceConstraints">The set of constraints that will be validated for members of the bucket.</param>
            <param name="validator">A validator instance that will be invoked to validate the child constraints.</param>
            <param name="discriminators">A set of discriminators that determine whether or not an instance is part of this bucket.</param>
        </member>
        <member name="M:Hl7.Fhir.Validation.IBucket.Add(Hl7.Fhir.ElementModel.ITypedElement)">
            <summary>
            
            </summary>
            <param name="candidate"></param>
            <remarks><paramref value='sequential' /> ensures the slice only tries to match the list of candidates in order: the first non-matching candidate
            ends further evaluation of the list of canidates. This improves performance for ordered slices.</remarks>
        </member>
        <member name="P:Hl7.Fhir.Validation.IBucket.Name">
            <summary>
            The results of the last call to Receive().
            </summary>
            <remarks>Results are in the same order as the candidates passed in, and the result list will have the same number of elements.</remarks>
        </member>
        <member name="T:Hl7.Fhir.Validation.ValidationSettings">
            <summary>Configuration settings for the <see cref="T:Hl7.Fhir.Validation.Validator"/> class.</summary>
        </member>
        <member name="P:Hl7.Fhir.Validation.ValidationSettings.ResourceResolver">
            <summary>
            The resolver to use when references to other resources are encountered in the instance.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Validation.ValidationSettings.TerminologyService">
            <summary>
            The terminology service to use to validate coded instance data.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Validation.ValidationSettings.FhirPathCompiler">
            <summary>
            An instance of the FhirPath compiler to use when evaluating constraints
            (provide this if you have custom functions included in the symbol table)
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Validation.ValidationSettings.GenerateSnapshot">
            <summary>
            The validator needs StructureDefinitions to have a snapshot form to function. If a StructureDefinition
            without a snapshot is encountered, should the validator generate the snapshot from the differential
            present in the StructureDefinition? Default is 'false'.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Validation.ValidationSettings.GenerateSnapshotSettings">
            <summary>
            Configuration settings for the snapshot generator
            (if the <see cref="P:Hl7.Fhir.Validation.ValidationSettings.GenerateSnapshot"/> property is enabled).
            <para>Never returns <c>null</c>. Assigning <c>null</c> reverts back to default settings.</para>
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Validation.ValidationSettings.Trace">
            <summary>
            Include informational tracing information in the validation output. Useful for debugging purposes. Default is 'false'.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Validation.ValidationSettings.SkipConstraintValidation">
            <summary>
            StructureDefinition may contain FhirPath constraints to enfore invariants in the data that cannot
            be expresses using StructureDefinition alone. This validation can be turned off for performance or
            debugging purposes. Default is 'false'.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Validation.ValidationSettings.ResolveExteralReferences">
            <summary>
            If a reference is encountered that references to a resource outside of the current instance being validated,
            this setting controls whether the validator will call out to the ResourceResolver to try to resolve the
            external reference. Note: References that refer to resources inside the current instance (i.e.
            contained resources, Bundle entries) will always be followed and validated.
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Validation.ValidationSettings.EnableXsdValidation">
            <summary>
            If set to true (and the XDocument specific overloads of validate() are used), the validator will run
            .NET XSD validation prior to running profile validation
            </summary>
        </member>
        <member name="P:Hl7.Fhir.Validation.ValidationSettings.ConstraintBestPractices">
            <summary>
            If set to enabled, the validator will treat as error the violations of the invariants marked as best practices, if disabled they will be marked as warnings.
            </summary>
        </member>
        <member name="M:Hl7.Fhir.Validation.ValidationSettings.#ctor">
            <summary>Default constructor. Creates a new <see cref="T:Hl7.Fhir.Validation.ValidationSettings"/> instance with default property values.</summary>
        </member>
        <member name="M:Hl7.Fhir.Validation.ValidationSettings.#ctor(Hl7.Fhir.Validation.ValidationSettings)">
            <summary>Clone constructor. Generates a new <see cref="T:Hl7.Fhir.Validation.ValidationSettings"/> instance initialized from the state of the specified instance.</summary>
            <exception cref="T:System.ArgumentNullException">The specified argument is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Validation.ValidationSettings.CopyTo(Hl7.Fhir.Validation.ValidationSettings)">
            <summary>Copy all configuration settings to another instance.</summary>
            <param name="other">Another <see cref="T:Hl7.Fhir.Validation.ValidationSettings"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">The specified argument is <c>null</c>.</exception>
        </member>
        <member name="M:Hl7.Fhir.Validation.ValidationSettings.Clone">
            <summary>Creates a new <see cref="T:Hl7.Fhir.Validation.ValidationSettings"/> object that is a copy of the current instance.</summary>
        </member>
        <member name="M:Hl7.Fhir.Validation.ValidationSettings.CreateDefault">
            <summary>Creates a new <see cref="T:Hl7.Fhir.Validation.ValidationSettings"/> instance with default property values.</summary>
        </member>
        <member name="T:Hl7.Fhir.Validation.XmlValidationExtensions">
            <summary>
            Add support for validating against Base subclasses (instead of IElementNavigator) to the Validator
            </summary>
        </member>
    </members>
</doc>
